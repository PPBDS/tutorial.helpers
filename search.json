[{"path":"https://ppbds.github.io/tutorial.helpers/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 David Kane Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/addins.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Functions for Working with Tutorials","text":"provided two functions help writing tutorials: make_exercise() check_current_tutorial(). first creates new exercise open RMD current location cursor. key argument make_exercise() type, \"code\" default produces coding exercise. allowed values type \"yes-answer\" \"-answer\". check_current_tutorial() reformats entire open tutorial, mainly ordering exercises correctly ensuring chunk labels correct. using RStudio, mapped variations functions four RStudio addins: “Tutorial Code Exercise”, “Tutorial Written Exercise (Answer)”, “Tutorial Written Exercise (Answer)” “Format Tutorial Chunk Labels.” first three insert skeleton next exercise tutorial, featuring key component parts. even take guess correct exercise number. “Format Tutorial Chunk Labels” addin useful. Always run testing tutorial. ensures exercises sequentially numbered code chunk names correct unique. can find addins “Addins” tab top Rstudio toolbar. Make sure cursor located point Rmd want insert new exercise. Make sure cursor located correct location. make_exercise(), default, produces new code exercise skeleton exercise title auto-generated code chunk labels. Topic, Exercise part, titled “Plotting”. three code chunks included default: exercise, hint test. need include three, although cases . exercise code chunk location students type answers. hint code chunk displayed students click Hint button. test code chunk include correct answer, can sure work students enter exercise code chunk. See advice writing good tutorial code exercises. First, start correct answer, code want students submit. Place code test chunk end. test process ensure code work students. Second, copy/paste correct answer hint chunk middle. replace one key words function arguments argument values .... Third, add actual question top skeleton. instructions cause students enter correct answer exercise chunk? Fourth, drop knowledge ### end. exercise opportunity teach. Make use ! create similar exercise structures auto-generated code chunk id exercise number. difference question_text() options filled differently. make_exercise(type = '-answer') R function run, using Positron. “Answer” Exercises usually used confirmation student completed specified task. case, need us supply correct answer. can allow students edit submissions. make_exercise(type = 'yes-answer') R function run, using Positron. “Answer” Exercises require tutorial author provide (excellent!) answer question. harder looks, especially questions without single “right” answer. also rare opportunity since students usually study supplied answer quite closely. want check answer matches. can’t allow students edit answers questions since might (misuse) option just copy/paste/modify supplied answer. learnr package allow hints written exercises. add test chunk, rarely makes sense written exercise. main counter-example question asks students run R command Console copy command result command answer. Even though submitting simple code answer, can make sense test chunk executes R code asking run, just ensure work . check_current_tutorial() R function run, using Positron. often need add new exercise middle collection exercises. , want delete one exercise middle collection. either scenario, exercises now mis-numbered. either two Exercise 5’s go straight Exercise 4 Exercise 6. want renumber remaining exercises duplicates missing numbers. “Format Tutorial Chunk Labels” addin accomplishes renumbering. also , changing code chunk names consistent new exercise numbers. Finally, ensures code chunk labels follow standard: begin (30 characters ) topic title, remove special characters, replace spaces dashes, make letters lowercase. Since code chunk labels (derived title topic exercise resides) hard cutoff 30 characters, try make sure topic titles different somewhere first 30 characters (including spaces) within given tutorial. , tutorial run since unique code chunk labels required.","code":"### Exercise 7  ```{r plotting-7, exercise = TRUE}  ```  <button onclick = \"transfer_code(this)\">Copy previous code<\/button>  ```{r plotting-7-hint, eval = FALSE}  ```  ```{r plotting-7-test, include = FALSE}  ```  ### ### Exercise 9  ```{r plotting-9} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ```  ### ### Exercise 8  ```{r plotting-8} question_text(NULL,     message = \"Place correct answer here.\",     answer(NULL, correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ```  ###"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/addins.html","id":"tutorial-code-exercise","dir":"Articles","previous_headings":"","what":"Tutorial Code Exercise","title":"Functions for Working with Tutorials","text":"make_exercise(), default, produces new code exercise skeleton exercise title auto-generated code chunk labels. Topic, Exercise part, titled “Plotting”. three code chunks included default: exercise, hint test. need include three, although cases . exercise code chunk location students type answers. hint code chunk displayed students click Hint button. test code chunk include correct answer, can sure work students enter exercise code chunk. See advice writing good tutorial code exercises. First, start correct answer, code want students submit. Place code test chunk end. test process ensure code work students. Second, copy/paste correct answer hint chunk middle. replace one key words function arguments argument values .... Third, add actual question top skeleton. instructions cause students enter correct answer exercise chunk? Fourth, drop knowledge ### end. exercise opportunity teach. Make use !","code":"### Exercise 7  ```{r plotting-7, exercise = TRUE}  ```  <button onclick = \"transfer_code(this)\">Copy previous code<\/button>  ```{r plotting-7-hint, eval = FALSE}  ```  ```{r plotting-7-test, include = FALSE}  ```  ###"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/addins.html","id":"tutorial-written-exercise-without-and-with-answers","dir":"Articles","previous_headings":"","what":"Tutorial Written Exercise (without and with answers)","title":"Functions for Working with Tutorials","text":"create similar exercise structures auto-generated code chunk id exercise number. difference question_text() options filled differently. make_exercise(type = '-answer') R function run, using Positron. “Answer” Exercises usually used confirmation student completed specified task. case, need us supply correct answer. can allow students edit submissions. make_exercise(type = 'yes-answer') R function run, using Positron. “Answer” Exercises require tutorial author provide (excellent!) answer question. harder looks, especially questions without single “right” answer. also rare opportunity since students usually study supplied answer quite closely. want check answer matches. can’t allow students edit answers questions since might (misuse) option just copy/paste/modify supplied answer. learnr package allow hints written exercises. add test chunk, rarely makes sense written exercise. main counter-example question asks students run R command Console copy command result command answer. Even though submitting simple code answer, can make sense test chunk executes R code asking run, just ensure work .","code":"### Exercise 9  ```{r plotting-9} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ```  ### ### Exercise 8  ```{r plotting-8} question_text(NULL,     message = \"Place correct answer here.\",     answer(NULL, correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ```  ###"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/addins.html","id":"written-exercise-no-answer","dir":"Articles","previous_headings":"","what":"Written Exercise (no Answer):","title":"Functions for Working with Tutorials","text":"make_exercise(type = '-answer') R function run, using Positron. “Answer” Exercises usually used confirmation student completed specified task. case, need us supply correct answer. can allow students edit submissions.","code":"### Exercise 9  ```{r plotting-9} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ```  ###"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/addins.html","id":"written-exercise-with-answer","dir":"Articles","previous_headings":"","what":"Written Exercise (with Answer):","title":"Functions for Working with Tutorials","text":"make_exercise(type = 'yes-answer') R function run, using Positron. “Answer” Exercises require tutorial author provide (excellent!) answer question. harder looks, especially questions without single “right” answer. also rare opportunity since students usually study supplied answer quite closely. want check answer matches. can’t allow students edit answers questions since might (misuse) option just copy/paste/modify supplied answer. learnr package allow hints written exercises. add test chunk, rarely makes sense written exercise. main counter-example question asks students run R command Console copy command result command answer. Even though submitting simple code answer, can make sense test chunk executes R code asking run, just ensure work .","code":"### Exercise 8  ```{r plotting-8} question_text(NULL,     message = \"Place correct answer here.\",     answer(NULL, correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ```  ###"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/addins.html","id":"format-tutorial-chunk-labels","dir":"Articles","previous_headings":"","what":"Format Tutorial Chunk Labels","title":"Functions for Working with Tutorials","text":"check_current_tutorial() R function run, using Positron. often need add new exercise middle collection exercises. , want delete one exercise middle collection. either scenario, exercises now mis-numbered. either two Exercise 5’s go straight Exercise 4 Exercise 6. want renumber remaining exercises duplicates missing numbers. “Format Tutorial Chunk Labels” addin accomplishes renumbering. also , changing code chunk names consistent new exercise numbers. Finally, ensures code chunk labels follow standard: begin (30 characters ) topic title, remove special characters, replace spaces dashes, make letters lowercase. Since code chunk labels (derived title topic exercise resides) hard cutoff 30 characters, try make sure topic titles different somewhere first 30 characters (including spaces) within given tutorial. , tutorial run since unique code chunk labels required.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/ai.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tutorials in the Age of AI","text":"AI changes everything. document describes best way write R tutorials embrace AI usage students. Prior rise AI, best way write tutorials, especially cover material assigned textbook. document assumes already know construct tutorials using learnr package, help tutorial.helpers package. Students need background order complete sorts tutorials, familiarity R, GitHub . Completing first four tutorials (.e., “Positron GitHub Introduction”) positron.tutorials tutorials r4ds.tutorials usually enough preparation. rise AI leads new kind tutorial. purpose longer teach students code. purpose teach students use AI create. Students always need practice working Quarto document (QMD) Console time. Good data scientists go back forth two modes, writing something QMD, executing Console, editing QMD, executing , . need force students often. AI tutorials begin Introduction provides summary key packages/functions tutorial cover. Introduction continues series exercises set repo/project/QMD tutorial completed. Introduction, 2 4 sections — official learnr nomenclature “Topics” — meat tutorial. last section Summary. starts overview Introduction began, past tense. couple exercises finish tutorial using quarto publish gh-pages analysis.qmd create webpage featuring cool plots student created. URL new webpage usually answer last exercise Summary, thereby finishing tutorial. Anytime ask student execute something Console, confirm done CP/CR, abbreviation copy/paste command/response. Feel free use example exercises document. Soon, add options tutorial.helpers::make_exercises() make easier. Either way, need edits. time see XX example exercise, need replace something sensible.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/ai.html","id":"introduction-1","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tutorials in the Age of AI","text":"Always begin students set repo Quarto document work . , must replace XX something sensible usually different XX’s. , example, name repo title QMD different even though hold places XX cases. Feel free copy/paste question -, replacing XX whatever makes sense assignment. , need provide repo name, Quarto document title . repo name descriptive also likely conflicts repos students GitHub account. , golf-scores project-1. need use analysis.qmd name QMD file student creates. using name doesn’t hurt anything convenient since decreases number things tutorial author needs change. , obviously, responsible adding knowledge drop teaches students something larger topic. second question Introduction often: third question generally loads tidyverse library Console: target audience tutorial experienced, can less didactic, leaving several instructions. also add steps, like loading libraries . recommend offering explicit instructions every tutorial. First, students need lots practice. Second, time tell add something QMD, give opportunity knowledge drop. applies tell students execute, Console, new addition QMD. Consider example creating object QMD: create object QMD, can execute code Console: course, can combine last two questions together, probably shouldn’t. want easier questions, harder. Splitting questions makes simpler. Perhaps importantly, questions provide opportunities knowledge drops. still leaves unclear process built code creates model . . . Leave discussion another day.","code":"### Exercise 1  Create a Github repo called `XX`. Make sure to click the \"Add a README file\" check box.  Connect the repo to a project on your computer using `File -> New Folder from Git ...`.  Make sure to select the \"Open in a new window\" box.   You need two Positon windows: this one for running the tutorial and the one you just created for writing your code and interacting with the Console.  In the new window, select `File -> New File -> Quarto Document ...`. Provide a title -- `\"XX\"` -- and an author (you). Render the document and save it as `analysis.qmd`.  Create a `.gitignore` file with `analysis_files` on the first line and then a blank line. Save and push.  In the Console, run:  ```          show_file(\".gitignore\") ```  If that fails, it is probably because you have not yet loaded `library(tutorial.helpers)` in the Console.  CP/CR.  ```{r introduction-1} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ```  ###   <!-- XX: Insert a knowledge drop related to this project. --> ### Exercise 2  In your QMD, put `library(tidyverse)` in a new code chunk. Render the file using `Cmd/Ctrl + Shift + K`.  Notice that the file does not look good because the code is visible and there are annoying messages. To take care of this, add `#| message: false` to remove all the messages in this `setup` chunk. Also, add the following to the YAML header to remove all code echos from the HTML:  ```          execute:    echo: false ```  In the Console, run:  ```          show_file(\"analysis.qmd\", chunk = \"Last\") ```  CP/CR.  ```{r introduction-2} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 6) ```  ###   <!-- XX: Insert a knowledge drop related to this project. --> ### Exercise 3  Place your cursor in the QMD file on the `library(tidyverse)` line. Use `Cmd/Ctrl + Enter` to execute that line.  Note that this causes `library(tidyverse)` to be copied down to the Console and then executed.   CP/CR.  ```{r introduction-3} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 8) ```  ###  <!-- XX: Insert a knowledge drop related to this project. --> ### Exercise 12  Create a new code chunk in your QMD. Add a code chunk option: `#| cache: true`. Copy/paste the R code for the final model into the code chunk, assigning the result to `fit_XX`.   `Cmd/Ctrl + Shift + K`. It may take some time to render your QMD, depending on how complex your model is. But, by including `#| cache: true` you cause Quarto to cache the results of the chunk. The next time you render your QMD, as long as you have not changed the code, Quarto will just load up the saved object.  At the Console, run:  ``` tutorial.helpers::show_file(\"XX.qmd\", chunk = \"Last\") ```  CP/CR.  ```{r courage-12} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 8) ```  ###   To confirm, `Cmd/Ctrl + Shift + K` again. It should be quick. ### Exercise 13  Place your cursor in the QMD file on the `fit_XX` line. Use `Cmd/Ctrl + Enter` to execute that line.   At the Console, run `ls()`. CP/CR.  ```{r courage-13} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 8) ```  ###   <!-- XX: Insert a knowledge drop related to this project. -->"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/ai.html","id":"walking-the-path","dir":"Articles","previous_headings":"","what":"Walking the path","title":"Tutorials in the Age of AI","text":"teach students topic X, first need decide final destination. want students able completing tutorial? us, almost always plot, often several plots. envisioned goal, need create “path” students can use reach goal, first supervision , second, . path consist several stepping stones, stops along way.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/ai.html","id":"providing-answers","dir":"Articles","previous_headings":"","what":"Providing Answers","title":"Tutorials in the Age of AI","text":"ensure students right path code, need provide code verified correct. Although tell students replace code every step, student lost, able refer code get back track. Also, editing tutorials, want easily run code Console render . goal mind, add R chunks provide code students. R chunk echo = TRUE allows students see code written within . makes easy students copy paste code need . Additionally, eval = TRUE default argument R chunk, code within automatically run well. students, able see output code, can helpful code plots graph. inappropriate unnecessary include output code, just set eval = FALSE explicitly. case, answer chunk look like:","code":"### Exercise 6  Using your favorite AI, prompt it to generate R code that ... Add the code to your QMD in a new chunk. Place your cursor on the first line of the code and run `Cmd/Ctrl + Enter`.  In the Console, run:  ```          show_file(\"analysis.qmd\", chunk = \"Last\") ```  CP/CR.  ```{r something-1} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 4) ```  ###  ```{r, echo = TRUE}  ```  ###   <!-- XX: Insert a knowledge drop related to this project. --> ```{r, echo = TRUE, eval = FALSE}  ```"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/ai.html","id":"plotting-questions","dir":"Articles","previous_headings":"","what":"Plotting Questions","title":"Tutorials in the Age of AI","text":"Plotting exercises generally handled sequence four questions. Prior , tutorial probably student practice gathering, organizing, cleaning data. first three prior questions tells student replace current pipe QMD code. check done show_file(). purpose question ensure student’s data match data. Note numbering theses questions arbitrary. Just run check_current_tutorial() fix . second question tells student , QMD, assign result pipe new variable, often x. tell student Cmd/Ctrl + Enter code workspace includes copy x. Note need x created QMD, just Console, latest chunks use x create plot. third question tells student type x Console, followed “CP/CR.” purpose student look tibble also set stage actual graphics question. defining x, probably require students keep reasonable number variables. four questions combined one? Probably. spreading things two advantages. First, ensures even weaker students get lost. Second, provides us four opportunities drop knowledge. Now, can move plotting question. age AI, students AI write code plot. specifying data x earlier. student add new code new code cell, check done show_file(). purpose question ensure student generated code.","code":"### Exercise 8  Before creating a plot, we need to ensure that your data matches our data. In the QMD, replace your code from the previous exercise with our code.  In the Console, run:  ```          show_file(\"analysis.qmd\", chunk = \"Last\") ```  CP/CR.  ```{r ai-usage-8} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 6) ```  ###  <!-- XX: Insert a knowledge drop related to this project. --> ### Exercise 9  Within the latest code chunk, add the option: `#| cache: true`. Assign the result of the pipe to `x`.   `Cmd/Ctrl + Shift + K`. By including `#| cache: true` you cause Quarto to cache the results of the chunk. The next time you render your QMD, as long as you have not changed the code, Quarto will just load up the saved object.  If you have not done so already, you should add `analysis_cache` to the `.gitginore`. The content of the cache file does not belong on GitHub.  Place your cursor on the line where the pipe is assigned to `x`, run `Cmd/Ctrl + Enter`, thus ensuring that the workspace also includes a copy of `x`.  CP/CR.  ```{r ai-usage-9} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 8) ```  ###  Our code:  ```{r, echo = TRUE} x <- ... ```  <!-- XX: Insert a knowledge drop related to this project. --> ### Exercise 10  Within the Console, type `x`, which we previously assigned to a pipe and ran in the Console. Hit `Enter`.  CP/CR.  ```{r ai-usage-10} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 8) ```  ###  Our code:  ```{r, echo=TRUE} x ... ```  <!-- XX: Insert a knowledge drop related to this project. --> ### Exercise 11  Ask AI to generate R code that uses `x` to plot a basic graph showing XX... Mention you want to use the data from `x` and copy/paste the `x` you ran in the Console with the resulting tibble. You only need the top 3 lines, mainly to include column names.  Within `labs()`, edit or add a proper title, subtitle, and caption. If axis labels would be useful, add them, but if unnecessary, don't bother. Don't assign the code for the plot to any variable. Put the plot code in a new code chunk. Run `Cmd/Ctrl + Shift + K` to ensure that everything works. Make your plot look nice.  In the Console, run:  ```          show_file(\"analysis.qmd\", chunk = \"Last\") ```  CP/CR.  ```{r ai-usage-11} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 12) ```  ###  Our code:  ```{r, echo=TRUE}   ... ```  ###  <!-- XX: Make sure your plotting code is good! This will take some time. You had better have a subtitle which provides the take-away message of the plot. AI sometimes gives you too much code, lots of `theme()` stuff and so on. This is no good! In most cases, we are happy with concise, straightforward code. Insert a knowledge drop related to this project. -->"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/cloud.html","id":"tutorials-and-rstudio-projects","dir":"Articles","previous_headings":"","what":"Tutorials and RStudio Projects","title":"Using Tutorials with Posit Cloud","text":"tutorials, never leave RStudio Project started tutorial. tutorials require create new RStudio Project. Examples r4ds.tutorials package include “RStudio code” “RStudio Quarto.” works fine local computer. Posit Cloud, things trickier. must manually keep track different RStudio Projects working. order start new RStudio Project Posit Cloud, must go back Workspace, click “New Project” upper right, select “New Project Git Repository,” provide URL Git repo. click “OK,” now two RStudio Projects Workspace. two projects completely separate. run separate “containers,” .e., separate computers connection one another. One might think problem. able just move back--forth two RStudio Projects, just local computer. work Posit Cloud time switch away tutorial RStudio Project, Posit Cloud closes tutorial, thereby requiring restart time come back. annoying! solution login Posit Cloud twice, keeping login tab browser. one login, looking tutorial RStudio Project, answering questions go along. login, looking second RStudio Project, usually connected Github repo. work. , two logins just two tabs browser, easy switch back forth. Warning: Posit Cloud (unlike local computer) progress tutorial saved across RStudio Projects. , close RStudio Project working tutorial, lose work done tutorial.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/cloud.html","id":"rstudio-project-templates","dir":"Articles","previous_headings":"","what":"RStudio Project Templates","title":"Using Tutorials with Posit Cloud","text":"One problem working RStudio Posit Cloud new RStudio Project “clean,” meaning packages installed RStudio settings may selected previous RStudio Projects disappeared. best way solve create Project Template. idea behind templates want start new RStudio Projects favorite packages already installed, preferred RStudio preferences already selected, . things template, new RStudio Project create start tasks already accomplished. Consider setting template completing steps saving resulting workspace template.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Instructions for Writing R Tutorials","text":"document describes best way write R tutorials using learnr package. common use case tutorial covers material assigned textbook, r4ds.tutorials package R Data Science (2e) Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund.. Instructors assign textbook readings students. want students read , perhaps importantly, go associated code, typing confirming . Sadly, students almost never . Fortunately, tutorial.helpers package provides tools ensuring students type assigned code. Imagine shallowest possible learning curve. Almost every student able answer almost every exercise, albeit perhaps help hint. hard questions. fact, really aren’t questions . Instead, instructions: one thing, next, next. Almost exercises feature knowledge drop, bit information, rarely two sentences, provided student answered question. Assume giving student private lesson. ask question. give answer. say next? want teach , given context? building “pit success.” Generally, students don’t assigned reading, least large class. However, complete required work. assigned tutorials. promise: complete tutorials, learn material. simply way .","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set Up","title":"Instructions for Writing R Tutorials","text":"Tutorials live directory within inst/tutorials whichever package working . recommend directory name combination prefix number (indicate week/chapter tutorial associated /order ) name, generally shorter full title tutorial although similar . Within directory R Markdown file , sometimes, material like images data directory. prefix number determines order tutorials appear someone gets around creating tutorial selector extension Positron. default, name R Markdown file tutorial.Rmd, name works long file appropriate YAML header. create new tutorial, use File -> New File -> R Markdown.... Choose “Template” option select “Helpers Tutorial” tutorial.helpers package. Follow instructions. id value important. directory tutorial located. used name answer file students save end tutorial. Note tutorials must R Markdown documents, meaning suffix .Rmd. can (yet) use Quarto documents tutorials. Fortunately, need works Quarto also works R Markdown. main difference code chunk options appear within {}. Don’t worry detail. setup code chunk top tutorial. must library(learnr) , use tools, library(tutorial.helpers) chunk. template also provides useful settings various options. Warning: must ensure library used tutorial explicitly loaded setup chunk. Almost every tutorial makes use functions tidyverse package, sure load . Unfortunately, nothing test suite captures common error using library X tutorial code forgetting load setup chunk. recommend always including question requires students load library used tutorial, learnr tutorial.helpers. good seveal reasons. First, students always forgetting load libraries. practice helps. Second, load-library question provides good occasion knowledge drop. Third, load-library question include test case code chunk loads library. test pass library loaded us setup chunk. tutorials part R package, ensure tutorial.helpers included Imports library loaded tutorial , least, included Suggests.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"Instructions for Writing R Tutorials","text":"beginning every tutorial includes copy-code-chunk info-section code chunks. tutorial divided different topics appear side panels. first topic “Introduction” last “Summary.” Within topics, Introduction Summary, series exercises can include writing code writing text. end tutorial, download-answers code chunk provides students instructions download copy answers. Introduction portion two four sentence main topics covered tutorial. ? students get giving 60 minutes lives? functions/techniques learn? Summary portion two four sentences bring lessons tutorial together student. know now know ? important functions/techniques covered? similar Introduction. made promise learn. kept promise. one two key resources topic tutorial, resources mentioned somewhere tutorial also Summary. Anything typed keyboard belongs `backticks` (“quotation marks”), except package names, always bolded. Function names always include parentheses: read_csv(), read_csv. Example: + sign used connect ggplot() components using ggplot2 library. Ensure first questions always require students load libraries used tutorial. , look libraries load set chunk. (Try many .) , except learnr tutorial.helpers, merit exercise requires student type library(package.name). ensures students get practice loading libraries. also provides occasion drop knowledge. Don’t forget libraries load included DESCRIPTION file — tutorial part package — probably Suggests.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"topics","dir":"Articles","previous_headings":"","what":"Topics","title":"Instructions for Writing R Tutorials","text":"Tutorials divided topics appear side panel. create topics, include double hash (##) text show side panel. also called topic title. Use sentence case. line topic title, put three hashes. ensures students see introductory text see first exercise. one topic double hash (##) triple hash (###) next line Summary topic, since exercises follow Summary text. topic begins sentence two group exercises trying accomplish. Example: link formatted correctly tutorial knitted. Topic introductions sometimes two parts: introductory text plot replicated portion tutorial. two parts generally separated triple hash. last exercise topic, put triple hash give two sentence summary topic accomplished. topic 10 minute transfer knowledge student. beginning, mentioned purpose. Conclude tying things back original purpose. Often, “purposes” fairly trivial: promised go example scatter plot , fact, . OK! writing poetry. every topic leads salvation. One two high quality links, specifically relevant topic, included/explained either beginning end topic, unless topic short.","code":"## Interacting with sites with `GET()` ###  In order to get data from an API, we use the **httr** package.  The package is designed to imitate standard HTTP in R.  Read more about HTTP [here](https://www.jmarshall.com/easy/http/).  ### Exercise 1"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"exercises","dir":"Articles","previous_headings":"","what":"Exercises","title":"Instructions for Writing R Tutorials","text":"topic composed series numbered exercises. exercise flow requires students hit “Continue” button least . Begin Start sentence two knowledge /question . length Start text longer one two lines, place exercise code chunk part. Instead, Start includes triple hash, thereby creating Continue button. length text short enough students willing read (two sentences), can include exercise code chunk part. time need triple hash exercise code chunk. expect students read two sentences text time. two sentences, almost always want use triple hash order create Continue button students break. won’t read two sentences without break. danger students just click Continue button see question , , start reading. little can . However, can take advantage students’ tendency read sentence two proceeds question fairly closely. great place teaching since students can’t skip since don’t know provides necessary context answering question. Start, come three code chunks: exercise code chunk location students place answers. hint code chunk includes hints students. Hint code chunks available code exercises. code chunk name hint code chunk always exactly one exercise code chunk, except -hint-n attached end. n replaced number hint. Almost always, one hint, suffix -hint-1. always set eval = FALSE hint code chunk since, often, hint legal R code. test code chunk exactly label one exercise code chunk, except -test attached end. Test code chunks, like hint code chunks, used code exercises. always includes include = FALSE code chunk option never want show code results students. Instead, purpose test code chunk ensure correct answer — , code want students enter exercise code chunk — works. three code chunks always followed triple hash. want student pause submitted answer likely consider output submission moving . last part exercise end, main opportunity drop knowledge. last part topic another knowledge drop. another exercise. just knowledge drop last exercise tries take broader overview. often separated last exercise simple ###. , can’t sentence two. substantive simple “Good job.” example, topic involved creating scatter plot, last exercise putting final touches scatter plot. last knowledge drop something scatter plots general, minor point particular scatter plot student just created. create exercise headers, use three hashes. Make sure number exercises – ### Exercise 1, ### Exercise 2 . two main types questions. First, normal coding questions. Students write code press Run Code button. Second, text questions require students either write prose copy/paste results running specific commands. Prose needed questions like “Explain meaning potential outcomes.” Copy/paste situations arise students instructed something like connect Github edit QMD file. confirm students completed questions issue command like list.files() copy/pasting command output. often abbreviate instruction using CP/CR, stands copy paste command result. example code question: First, start exercise sets stage. sometimes teaches something new, connects previous exercise, provides useful link, whatever. long enough, followed triple hash. , text continues instructions. time, , instruction, telling student, step--step, . Second, instruction requires students write code. Good instructions generate results student presses Run Code. Tutorial answers require smallest incremental number characters, relative last question, students type. one way know learning curve shallow. exercise code chunk requires students type lot characters, split exercise multiple separate exercises. Third, exercise requires copying code prior exercise place Copy previous code button exercise code chunk. Fourth, tutorials simple 95% students can answer 95% questions easily. One way ensure add hint almost every coding question. Hints must always code chunk name exercise chunk hint, “-hint-n” added end. , exercise code chunk named “ex-1”, hint associated exercise named “ex-1-hint-1”. second hint question named “ex-1-hint-2”, . create hint, always use eval = FALSE within parentheses code chunk. hints often include “…” symbols run correct R code. , need tell R run error occur R CMD check. Example: need wrap text long hint hand, inserting carriage returns . R wrap text automatically. Often, hints look like : “…” indicates places student needs insert code, value function name. code hints formatted correctly. Students can see first hint clicking next hint. , make sure last hint one want access , .e., one provides key information. students can see last hint, reason consult earlier hints. rarely provide one hint. Hints allowed coding questions, text questions. Fifth, third code chunk, exercise hint code chunks, test code chunk. Place answer — code want students enter exercise code chunk — test code chunk. Since test code chunk evaluated tutorial knitted (also happens testing), guarantees correct answer work students. Indeed, workflow writing exercise often begins , first, entering code want students provide test code chunk. copy/paste code hint code chunk, replacing functions /arguments ... appropriate. ask question , hope, cause students answer code test code chunk. instances can’t test code want students use. common case code requires web, generally downloading data. case, delete test code chunk. Sixth, separate code chunks end exercise using ###. simple questions result display data, one approach write “see value height row 1 23.” allows students know right track. Never hard-code number. Use R inline calculate , even though can bother. , much common, use end drop knowledge, especially function used answer exercise, one previous exercises topic. Note provide many exercises possible. example, every tutorial features question package must loaded. require students type items like library(tidyverse) even though done many times past. Every exercise another opportunity make learning curve shallow possible drop knowledge. questions better fewer. One way measure shallowness learning curve examine many new characters exercise requires answer. new characters worse. Better three exercises, loads different package, one exercise loads three packages . two types text questions: 1) provide students correct answer, submitted answer, , 2) provide answer. Examples: message argument, provide excellent answer. want allow students check got, less, correct answer. Note set allow_retry FALSE. means , see answer, students can’t modify answer. rows argument decides many rows empty text input . Always specify (approximately) much want students write. Reasonable units : one sentence, two sentences paragraph. Pick one three unless good reason . paragraph questions, mention specific words phrases students include answers. suggested answer includes word “validity,” example, tell students include (define) validity part answer. However, many written questions, don’t provide answer, don’t mind students resubmit. case, use format commonly used “process” questions told students something confirm done copying/pasting result command. tutorial.helpers::show_file() handy function confirming students modified text files instructed. example, telling students edit _quarto.yml file, can check : show_file() provides variety arguments cause return selected lines rather entire file. Keep mind show_file() available students Console default. can either always call tutorial.helpers::show_file(), , always (restart R Session!) student type library(tutorial.helpers) Console hand. Maybe instructions always use double colon, remind students first time tutorial just use library(tutorial.helpers). , don’t use double colon , first time show_file() used, remind students , see “function found” error, need run library(tutorial.helpers) Console. coding exercise always spit something. Interactivity good! Students always look code producing. situations students need make assignments , , result output Run Code button pressed. : little possible. just make pipe? , need create permanent object student work exercise code chunk lasting effects. annoying error prone. can student assignment also, part exercise, print object. works well. Follow coding Style Guide, especially spaces around operators like ” = “. Use one command per line pipes graphics, proper indentation. Indent plotting commands call ggplot(). create object one question assume available subsequent questions. won’t ! question independent every question. live separate R instances. exception (make use ) objects created initial setup chunk entire tutorial available later questions, just way library() commands executed need executed . Tutorials knitted/run directory located. , want read file data/ directory, write: R code chunk, presumably global setup chunk. , try execute line code Command + Return, fail , default, located main directory .package start working tutorials. Using setwd() solve problem. Command + Return now work R session “located” location tutorial run knitted. common type code questions involve step--step process building pipe, final output nice looking graphic. want first show graphic create end topic. show start topic last exercise, reminder graphic look like students need scroll way back . put code graphic setup code chunk. Save code object. name object “_p” suffix, “p” stands “plot.” way, put object name code chunk end topic rather copying code. build graphic, line line, series exercises, providing hints along way. difficult part tutorial creation writing “knowledge drops,” snippets wisdom (associated links) used end exercise. generally come two categories: details R functions/packages/websites background information substative data science problem hand. expect easy! Good knowledge drops hard. Make short. Students read sentence two. Perhaps best place knowledge drop, especially written questions, start exercise. , instead just asking question immediately, provide sentence two knowledge drops, even information really needed answer question. Students tend read sentences closely since might relevant question need answer. Rhetorical questions (almost) always work poorly knowledge drops. knowledge drop road sign. Example: “next section explore data .” Don’t waste time telling students expect next, just completed . Teach something real! sure knowledge drop? Look help page one functions used topic. Ideally, function used exercise, can one used lines . help page two areas interest: Arguments function, used topic still worth mentioning. good knowledge drop mention argument describe might useful. Related functions. example, use “Useful filter functions” section ?dplyr::filter help page. make good knowledge drops! Another example “See also” section ?arrange help page. can’t possibly use every R function exercise, can least describe knowledge drops. Use high quality links. second edition R Data Science amazing. Link often can. Anything associated Posit high quality. Examples include sites associated Tidyverse Tidymodels. Avoid links low quality sites like https://rdrr.io/ , https://www.rdocumentation.org/, https://www.datamentor.io/. site uses ads avoided. Links function documentation useful. Indeed, link least documentation every function use. Two categories: Links help pages base function tricky. clear location best use purpose. suggestion use links involving stat.ethz.ch server, home base (think) core R developers. Consider examples cut() print(). Links functions Tidyverse use docs maintained Posit. Consider examples arrange() aes(). One common approach like : Note concisely provide command brings help page link help page . tutorial.helpers package provides collection functions facilitate creation testing tutorial packages. Read “Functions Working Tutorial” vignette. Three vignettes create new tutorial exercises. fourth demonstrates test tutorials package. Highly recommended!","code":"### Exercise 2  Start your code with `cces`. Use the pipe operator `|>` to add the  function `filter()`, selecting the  rows where `state` is equal to  \"Massachusetts\". To set something equal to a value in `filter()`  use two equal signs: `==`.  ```{r filter-2, exercise = TRUE} ```  ```{r filter-2-hint-1, eval = FALSE} cces |>    filter(state == \"...\") ```  ```{r filter-2-test, include = FALSE} cces |>    filter(state == \"Massachusetts\") ``` ###   `==` is used because it is **checking** whether the value of the  variable on the left is equal to the value on the left. See  [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Comparison.html)  for discussion of other relational operators in R. A single equation symbol, `=`, is used to set something equal to  something else. <button onclick = \"transfer_code(this)\">Copy previous code<\/button> ```{r ex-1-hint-1, eval = FALSE} This is an example hint. Normally sentences like these  would cause an error in R because it is not proper code.  However, since we include eval = FALSE in the r-chunk,  R ignores all errors! ``` ```{r ex-1-hint-2, eval = FALSE} ... |>    filter(year = ...) |>    ...(flights) ``` ### Exercise 6  Explain potential outcomes in about two sentences.  ```{r definitions-6} question_text(NULL,     message = \"This is where we place the correct answer. It will appear only after      students have submitted their own answers. Note that we do not need to wrap the      answer text by hand.\",               answer(NULL,             correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ``` ### Exercise 7  From the Console, run `list.files()`. CP/CR.  ```{r file-creation-7}   question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ``` In the Console, run:  ``` tutorial.helpers::show_file(\"_quarto.yml\") ```  CP/CR. x <- read_csv(\"data/myfile.csv\") > getwd() [1] \"/Users/davidkane/Desktop/projects/r4ds.tutorials\" > setwd(\"inst/tutorials/031-data-files/\") > getwd() [1] \"/Users/davidkane/Desktop/projects/r4ds.tutorials/inst/tutorials/031-data-files\" > See `?readr::locale` for [details](https://readr.tidyverse.org/articles/locales.html)."},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"flow","dir":"Articles","previous_headings":"","what":"Flow","title":"Instructions for Writing R Tutorials","text":"exercise flow requires students hit “Continue” button least . Begin Start sentence two knowledge /question . length Start text longer one two lines, place exercise code chunk part. Instead, Start includes triple hash, thereby creating Continue button. length text short enough students willing read (two sentences), can include exercise code chunk part. time need triple hash exercise code chunk. expect students read two sentences text time. two sentences, almost always want use triple hash order create Continue button students break. won’t read two sentences without break. danger students just click Continue button see question , , start reading. little can . However, can take advantage students’ tendency read sentence two proceeds question fairly closely. great place teaching since students can’t skip since don’t know provides necessary context answering question. Start, come three code chunks: exercise code chunk location students place answers. hint code chunk includes hints students. Hint code chunks available code exercises. code chunk name hint code chunk always exactly one exercise code chunk, except -hint-n attached end. n replaced number hint. Almost always, one hint, suffix -hint-1. always set eval = FALSE hint code chunk since, often, hint legal R code. test code chunk exactly label one exercise code chunk, except -test attached end. Test code chunks, like hint code chunks, used code exercises. always includes include = FALSE code chunk option never want show code results students. Instead, purpose test code chunk ensure correct answer — , code want students enter exercise code chunk — works. three code chunks always followed triple hash. want student pause submitted answer likely consider output submission moving . last part exercise end, main opportunity drop knowledge. last part topic another knowledge drop. another exercise. just knowledge drop last exercise tries take broader overview. often separated last exercise simple ###. , can’t sentence two. substantive simple “Good job.” example, topic involved creating scatter plot, last exercise putting final touches scatter plot. last knowledge drop something scatter plots general, minor point particular scatter plot student just created.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"question-types","dir":"Articles","previous_headings":"","what":"Question types","title":"Instructions for Writing R Tutorials","text":"create exercise headers, use three hashes. Make sure number exercises – ### Exercise 1, ### Exercise 2 . two main types questions. First, normal coding questions. Students write code press Run Code button. Second, text questions require students either write prose copy/paste results running specific commands. Prose needed questions like “Explain meaning potential outcomes.” Copy/paste situations arise students instructed something like connect Github edit QMD file. confirm students completed questions issue command like list.files() copy/pasting command output. often abbreviate instruction using CP/CR, stands copy paste command result. example code question: First, start exercise sets stage. sometimes teaches something new, connects previous exercise, provides useful link, whatever. long enough, followed triple hash. , text continues instructions. time, , instruction, telling student, step--step, . Second, instruction requires students write code. Good instructions generate results student presses Run Code. Tutorial answers require smallest incremental number characters, relative last question, students type. one way know learning curve shallow. exercise code chunk requires students type lot characters, split exercise multiple separate exercises. Third, exercise requires copying code prior exercise place Copy previous code button exercise code chunk. Fourth, tutorials simple 95% students can answer 95% questions easily. One way ensure add hint almost every coding question. Hints must always code chunk name exercise chunk hint, “-hint-n” added end. , exercise code chunk named “ex-1”, hint associated exercise named “ex-1-hint-1”. second hint question named “ex-1-hint-2”, . create hint, always use eval = FALSE within parentheses code chunk. hints often include “…” symbols run correct R code. , need tell R run error occur R CMD check. Example: need wrap text long hint hand, inserting carriage returns . R wrap text automatically. Often, hints look like : “…” indicates places student needs insert code, value function name. code hints formatted correctly. Students can see first hint clicking next hint. , make sure last hint one want access , .e., one provides key information. students can see last hint, reason consult earlier hints. rarely provide one hint. Hints allowed coding questions, text questions. Fifth, third code chunk, exercise hint code chunks, test code chunk. Place answer — code want students enter exercise code chunk — test code chunk. Since test code chunk evaluated tutorial knitted (also happens testing), guarantees correct answer work students. Indeed, workflow writing exercise often begins , first, entering code want students provide test code chunk. copy/paste code hint code chunk, replacing functions /arguments ... appropriate. ask question , hope, cause students answer code test code chunk. instances can’t test code want students use. common case code requires web, generally downloading data. case, delete test code chunk. Sixth, separate code chunks end exercise using ###. simple questions result display data, one approach write “see value height row 1 23.” allows students know right track. Never hard-code number. Use R inline calculate , even though can bother. , much common, use end drop knowledge, especially function used answer exercise, one previous exercises topic. Note provide many exercises possible. example, every tutorial features question package must loaded. require students type items like library(tidyverse) even though done many times past. Every exercise another opportunity make learning curve shallow possible drop knowledge. questions better fewer. One way measure shallowness learning curve examine many new characters exercise requires answer. new characters worse. Better three exercises, loads different package, one exercise loads three packages . two types text questions: 1) provide students correct answer, submitted answer, , 2) provide answer. Examples: message argument, provide excellent answer. want allow students check got, less, correct answer. Note set allow_retry FALSE. means , see answer, students can’t modify answer. rows argument decides many rows empty text input . Always specify (approximately) much want students write. Reasonable units : one sentence, two sentences paragraph. Pick one three unless good reason . paragraph questions, mention specific words phrases students include answers. suggested answer includes word “validity,” example, tell students include (define) validity part answer. However, many written questions, don’t provide answer, don’t mind students resubmit. case, use format commonly used “process” questions told students something confirm done copying/pasting result command. tutorial.helpers::show_file() handy function confirming students modified text files instructed. example, telling students edit _quarto.yml file, can check : show_file() provides variety arguments cause return selected lines rather entire file. Keep mind show_file() available students Console default. can either always call tutorial.helpers::show_file(), , always (restart R Session!) student type library(tutorial.helpers) Console hand. Maybe instructions always use double colon, remind students first time tutorial just use library(tutorial.helpers). , don’t use double colon , first time show_file() used, remind students , see “function found” error, need run library(tutorial.helpers) Console.","code":"### Exercise 2  Start your code with `cces`. Use the pipe operator `|>` to add the  function `filter()`, selecting the  rows where `state` is equal to  \"Massachusetts\". To set something equal to a value in `filter()`  use two equal signs: `==`.  ```{r filter-2, exercise = TRUE} ```  ```{r filter-2-hint-1, eval = FALSE} cces |>    filter(state == \"...\") ```  ```{r filter-2-test, include = FALSE} cces |>    filter(state == \"Massachusetts\") ``` ###   `==` is used because it is **checking** whether the value of the  variable on the left is equal to the value on the left. See  [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Comparison.html)  for discussion of other relational operators in R. A single equation symbol, `=`, is used to set something equal to  something else. <button onclick = \"transfer_code(this)\">Copy previous code<\/button> ```{r ex-1-hint-1, eval = FALSE} This is an example hint. Normally sentences like these  would cause an error in R because it is not proper code.  However, since we include eval = FALSE in the r-chunk,  R ignores all errors! ``` ```{r ex-1-hint-2, eval = FALSE} ... |>    filter(year = ...) |>    ...(flights) ``` ### Exercise 6  Explain potential outcomes in about two sentences.  ```{r definitions-6} question_text(NULL,     message = \"This is where we place the correct answer. It will appear only after      students have submitted their own answers. Note that we do not need to wrap the      answer text by hand.\",               answer(NULL,             correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ``` ### Exercise 7  From the Console, run `list.files()`. CP/CR.  ```{r file-creation-7}   question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ``` In the Console, run:  ``` tutorial.helpers::show_file(\"_quarto.yml\") ```  CP/CR."},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"code-questions","dir":"Articles","previous_headings":"","what":"Code questions","title":"Instructions for Writing R Tutorials","text":"example code question: First, start exercise sets stage. sometimes teaches something new, connects previous exercise, provides useful link, whatever. long enough, followed triple hash. , text continues instructions. time, , instruction, telling student, step--step, . Second, instruction requires students write code. Good instructions generate results student presses Run Code. Tutorial answers require smallest incremental number characters, relative last question, students type. one way know learning curve shallow. exercise code chunk requires students type lot characters, split exercise multiple separate exercises. Third, exercise requires copying code prior exercise place Copy previous code button exercise code chunk. Fourth, tutorials simple 95% students can answer 95% questions easily. One way ensure add hint almost every coding question. Hints must always code chunk name exercise chunk hint, “-hint-n” added end. , exercise code chunk named “ex-1”, hint associated exercise named “ex-1-hint-1”. second hint question named “ex-1-hint-2”, . create hint, always use eval = FALSE within parentheses code chunk. hints often include “…” symbols run correct R code. , need tell R run error occur R CMD check. Example: need wrap text long hint hand, inserting carriage returns . R wrap text automatically. Often, hints look like : “…” indicates places student needs insert code, value function name. code hints formatted correctly. Students can see first hint clicking next hint. , make sure last hint one want access , .e., one provides key information. students can see last hint, reason consult earlier hints. rarely provide one hint. Hints allowed coding questions, text questions. Fifth, third code chunk, exercise hint code chunks, test code chunk. Place answer — code want students enter exercise code chunk — test code chunk. Since test code chunk evaluated tutorial knitted (also happens testing), guarantees correct answer work students. Indeed, workflow writing exercise often begins , first, entering code want students provide test code chunk. copy/paste code hint code chunk, replacing functions /arguments ... appropriate. ask question , hope, cause students answer code test code chunk. instances can’t test code want students use. common case code requires web, generally downloading data. case, delete test code chunk. Sixth, separate code chunks end exercise using ###. simple questions result display data, one approach write “see value height row 1 23.” allows students know right track. Never hard-code number. Use R inline calculate , even though can bother. , much common, use end drop knowledge, especially function used answer exercise, one previous exercises topic. Note provide many exercises possible. example, every tutorial features question package must loaded. require students type items like library(tidyverse) even though done many times past. Every exercise another opportunity make learning curve shallow possible drop knowledge. questions better fewer. One way measure shallowness learning curve examine many new characters exercise requires answer. new characters worse. Better three exercises, loads different package, one exercise loads three packages .","code":"### Exercise 2  Start your code with `cces`. Use the pipe operator `|>` to add the  function `filter()`, selecting the  rows where `state` is equal to  \"Massachusetts\". To set something equal to a value in `filter()`  use two equal signs: `==`.  ```{r filter-2, exercise = TRUE} ```  ```{r filter-2-hint-1, eval = FALSE} cces |>    filter(state == \"...\") ```  ```{r filter-2-test, include = FALSE} cces |>    filter(state == \"Massachusetts\") ``` ###   `==` is used because it is **checking** whether the value of the  variable on the left is equal to the value on the left. See  [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Comparison.html)  for discussion of other relational operators in R. A single equation symbol, `=`, is used to set something equal to  something else. <button onclick = \"transfer_code(this)\">Copy previous code<\/button> ```{r ex-1-hint-1, eval = FALSE} This is an example hint. Normally sentences like these  would cause an error in R because it is not proper code.  However, since we include eval = FALSE in the r-chunk,  R ignores all errors! ``` ```{r ex-1-hint-2, eval = FALSE} ... |>    filter(year = ...) |>    ...(flights) ```"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"text-questions","dir":"Articles","previous_headings":"","what":"Text questions","title":"Instructions for Writing R Tutorials","text":"two types text questions: 1) provide students correct answer, submitted answer, , 2) provide answer. Examples: message argument, provide excellent answer. want allow students check got, less, correct answer. Note set allow_retry FALSE. means , see answer, students can’t modify answer. rows argument decides many rows empty text input . Always specify (approximately) much want students write. Reasonable units : one sentence, two sentences paragraph. Pick one three unless good reason . paragraph questions, mention specific words phrases students include answers. suggested answer includes word “validity,” example, tell students include (define) validity part answer. However, many written questions, don’t provide answer, don’t mind students resubmit. case, use format commonly used “process” questions told students something confirm done copying/pasting result command. tutorial.helpers::show_file() handy function confirming students modified text files instructed. example, telling students edit _quarto.yml file, can check : show_file() provides variety arguments cause return selected lines rather entire file. Keep mind show_file() available students Console default. can either always call tutorial.helpers::show_file(), , always (restart R Session!) student type library(tutorial.helpers) Console hand. Maybe instructions always use double colon, remind students first time tutorial just use library(tutorial.helpers). , don’t use double colon , first time show_file() used, remind students , see “function found” error, need run library(tutorial.helpers) Console.","code":"### Exercise 6  Explain potential outcomes in about two sentences.  ```{r definitions-6} question_text(NULL,     message = \"This is where we place the correct answer. It will appear only after      students have submitted their own answers. Note that we do not need to wrap the      answer text by hand.\",               answer(NULL,             correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ``` ### Exercise 7  From the Console, run `list.files()`. CP/CR.  ```{r file-creation-7}   question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ``` In the Console, run:  ``` tutorial.helpers::show_file(\"_quarto.yml\") ```  CP/CR."},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"tips","dir":"Articles","previous_headings":"","what":"Tips","title":"Instructions for Writing R Tutorials","text":"coding exercise always spit something. Interactivity good! Students always look code producing. situations students need make assignments , , result output Run Code button pressed. : little possible. just make pipe? , need create permanent object student work exercise code chunk lasting effects. annoying error prone. can student assignment also, part exercise, print object. works well. Follow coding Style Guide, especially spaces around operators like ” = “. Use one command per line pipes graphics, proper indentation. Indent plotting commands call ggplot(). create object one question assume available subsequent questions. won’t ! question independent every question. live separate R instances. exception (make use ) objects created initial setup chunk entire tutorial available later questions, just way library() commands executed need executed . Tutorials knitted/run directory located. , want read file data/ directory, write: R code chunk, presumably global setup chunk. , try execute line code Command + Return, fail , default, located main directory .package start working tutorials. Using setwd() solve problem. Command + Return now work R session “located” location tutorial run knitted.","code":"x <- read_csv(\"data/myfile.csv\") > getwd() [1] \"/Users/davidkane/Desktop/projects/r4ds.tutorials\" > setwd(\"inst/tutorials/031-data-files/\") > getwd() [1] \"/Users/davidkane/Desktop/projects/r4ds.tutorials/inst/tutorials/031-data-files\" >"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"pipes","dir":"Articles","previous_headings":"","what":"Pipes","title":"Instructions for Writing R Tutorials","text":"common type code questions involve step--step process building pipe, final output nice looking graphic. want first show graphic create end topic. show start topic last exercise, reminder graphic look like students need scroll way back . put code graphic setup code chunk. Save code object. name object “_p” suffix, “p” stands “plot.” way, put object name code chunk end topic rather copying code. build graphic, line line, series exercises, providing hints along way.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"knowledge-drops","dir":"Articles","previous_headings":"","what":"Knowledge Drops","title":"Instructions for Writing R Tutorials","text":"difficult part tutorial creation writing “knowledge drops,” snippets wisdom (associated links) used end exercise. generally come two categories: details R functions/packages/websites background information substative data science problem hand. expect easy! Good knowledge drops hard. Make short. Students read sentence two. Perhaps best place knowledge drop, especially written questions, start exercise. , instead just asking question immediately, provide sentence two knowledge drops, even information really needed answer question. Students tend read sentences closely since might relevant question need answer. Rhetorical questions (almost) always work poorly knowledge drops. knowledge drop road sign. Example: “next section explore data .” Don’t waste time telling students expect next, just completed . Teach something real! sure knowledge drop? Look help page one functions used topic. Ideally, function used exercise, can one used lines . help page two areas interest: Arguments function, used topic still worth mentioning. good knowledge drop mention argument describe might useful. Related functions. example, use “Useful filter functions” section ?dplyr::filter help page. make good knowledge drops! Another example “See also” section ?arrange help page. can’t possibly use every R function exercise, can least describe knowledge drops. Use high quality links. second edition R Data Science amazing. Link often can. Anything associated Posit high quality. Examples include sites associated Tidyverse Tidymodels. Avoid links low quality sites like https://rdrr.io/ , https://www.rdocumentation.org/, https://www.datamentor.io/. site uses ads avoided. Links function documentation useful. Indeed, link least documentation every function use. Two categories: Links help pages base function tricky. clear location best use purpose. suggestion use links involving stat.ethz.ch server, home base (think) core R developers. Consider examples cut() print(). Links functions Tidyverse use docs maintained Posit. Consider examples arrange() aes(). One common approach like : Note concisely provide command brings help page link help page .","code":"See `?readr::locale` for [details](https://readr.tidyverse.org/articles/locales.html)."},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"advice-for-knowledge-drops","dir":"Articles","previous_headings":"","what":"Advice for Knowledge Drops","title":"Instructions for Writing R Tutorials","text":"sure knowledge drop? Look help page one functions used topic. Ideally, function used exercise, can one used lines . help page two areas interest: Arguments function, used topic still worth mentioning. good knowledge drop mention argument describe might useful. Related functions. example, use “Useful filter functions” section ?dplyr::filter help page. make good knowledge drops! Another example “See also” section ?arrange help page. can’t possibly use every R function exercise, can least describe knowledge drops. Use high quality links. second edition R Data Science amazing. Link often can. Anything associated Posit high quality. Examples include sites associated Tidyverse Tidymodels. Avoid links low quality sites like https://rdrr.io/ , https://www.rdocumentation.org/, https://www.datamentor.io/. site uses ads avoided. Links function documentation useful. Indeed, link least documentation every function use. Two categories: Links help pages base function tricky. clear location best use purpose. suggestion use links involving stat.ethz.ch server, home base (think) core R developers. Consider examples cut() print(). Links functions Tidyverse use docs maintained Posit. Consider examples arrange() aes(). One common approach like : Note concisely provide command brings help page link help page .","code":"See `?readr::locale` for [details](https://readr.tidyverse.org/articles/locales.html)."},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"functions-for-working-with-tutorials","dir":"Articles","previous_headings":"","what":"Functions for Working with Tutorials","title":"Instructions for Writing R Tutorials","text":"tutorial.helpers package provides collection functions facilitate creation testing tutorial packages. Read “Functions Working Tutorial” vignette. Three vignettes create new tutorial exercises. fourth demonstrates test tutorials package. Highly recommended!","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Instructions for Writing R Tutorials","text":"addition tutorial.Rmd, tutorial often use inputs. two common locations storing inputs data images directories level tutorial.Rmd file. file data images available run time. (Note directories must names. Something like my_data work.) need R object accessible exercise code chunk, create initial global setup code chunk top tutorial. wary code downloads data web. won’t work student internet connection creates tutorial. Instead, save code downloaded data place object RDS file data directory. example “Wrangling Census data Tidyverse tools” tutorial tidycensus.tutorials package. first two commands download data save RDS file data directory. code assumes located directory tutorial.Rmd file. run commands , comment don’t want re-run time tutorial created. read_rds() call never commented always need median_age object. designing tutorials use objects like median_age, generally write two exercise code chunks. first student run code used create object . won’t work student connected web , luck, case get sensible error message. second question informs students , behind scenes, assigned result function R object. ask student just print object. don’t assignment , least don’t like questions don’t generate output. use similar approach models can take awhile fit. Example: , code works tutorial directory, higher directory R project . Also, first two commands commented , unless running hand create object. happens data large? See “Arrow” tutorial r4ds.tutorials example. First, generally switch away code exercises use written exercises. Students run required commands copy/paste command/response. Big downloads don’t work well exercise code chunks. Second, create small versions big data global setup chunk. allows us create test code chunks exercises follow. tests run much quickly smaller data. Also, package CRAN, need keep overall size package small possible. two main uses files data. First, can used “compile time” (tutorial.Rmd knit HTML) making plots anything else. Second, importantly, available students exercise code blocks “run time” (students tutorial). add images tutorial, first make directory called images folder contains tutorial.Rmd. Store images tutorial . can work files usual ways. Use include_graphics() add image document. Include code chunk, place want image appear tutorial. include_graphics() part knitr package, need library(knitr) setup code chunk. Note need name code chunks. students complete tutorials using screens different widths, good idea put knitr::opts_chunk$set(.width = '90%') setup code chunk. way, images appear sensible size regardless whether students using phone screen big monitor. sometimes want include “complex” text tutorial. common trying teach students use R code chunks strings R markdown wants process certain ways. can sometimes get away placing text environments surrounded three, even four, backticks. plain three four backtick environments create plain code block content inside displayed -. syntax highlighting execution applied, show example code text exactly typed. Four backtick environments allow three backticks written within block. works often, always. Comments characters like # especially problematic. also use parsermd package behind scenes. work well one might like. complexity arises tutorials R markdown whereas work Quarto. Quarto documents (like vignette), can use environment started four backticks along {verbatim} ended four backticks. won’t work R markdown. <pre><code> trick solves problem. add code chunk tutorial. want display R code chunk nested inside four backticks environment, can replace four backticks <pre><code> like <pre><code> serves purpose four backticks displays R code chunks verbatim.","code":"median_age <- get_acs(geography = \"county\",                       variables = \"B01002_001\",                       year = 2020) write_rds(median_age, \"data/median_age.rds\")  median_age <- read_rds(\"data/median_age.rds\") fit_gauss <- brm(formula = biden ~ 1,                 data = poll_data,                 refresh = 0,                 silent = 2,                 seed = 9) write_rds(fit_gauss, \"data/fit_gauss.rds\")  fit_gauss <- read_rds(\"data/fit_gauss.rds\") ```{r} include_graphics(\"images/example.png\") ``` <pre><code>```{r} 1 + 1 ```<\/code><\/pre> <pre><code> > tutorial.helpers::show_file(\"quarto-1.qmd\") --- title: \"Quarto 1\" author: David Kane format: html execute:    echo: false --- <pre><code>```{r} suppressPackageStartupMessages(library(tidyverse)) library(palmerpenguins) ```<\/code><\/pre> > <\/code><\/pre>"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Instructions for Writing R Tutorials","text":"need R object accessible exercise code chunk, create initial global setup code chunk top tutorial. wary code downloads data web. won’t work student internet connection creates tutorial. Instead, save code downloaded data place object RDS file data directory. example “Wrangling Census data Tidyverse tools” tutorial tidycensus.tutorials package. first two commands download data save RDS file data directory. code assumes located directory tutorial.Rmd file. run commands , comment don’t want re-run time tutorial created. read_rds() call never commented always need median_age object. designing tutorials use objects like median_age, generally write two exercise code chunks. first student run code used create object . won’t work student connected web , luck, case get sensible error message. second question informs students , behind scenes, assigned result function R object. ask student just print object. don’t assignment , least don’t like questions don’t generate output. use similar approach models can take awhile fit. Example: , code works tutorial directory, higher directory R project . Also, first two commands commented , unless running hand create object. happens data large? See “Arrow” tutorial r4ds.tutorials example. First, generally switch away code exercises use written exercises. Students run required commands copy/paste command/response. Big downloads don’t work well exercise code chunks. Second, create small versions big data global setup chunk. allows us create test code chunks exercises follow. tests run much quickly smaller data. Also, package CRAN, need keep overall size package small possible. two main uses files data. First, can used “compile time” (tutorial.Rmd knit HTML) making plots anything else. Second, importantly, available students exercise code blocks “run time” (students tutorial).","code":"median_age <- get_acs(geography = \"county\",                       variables = \"B01002_001\",                       year = 2020) write_rds(median_age, \"data/median_age.rds\")  median_age <- read_rds(\"data/median_age.rds\") fit_gauss <- brm(formula = biden ~ 1,                 data = poll_data,                 refresh = 0,                 silent = 2,                 seed = 9) write_rds(fit_gauss, \"data/fit_gauss.rds\")  fit_gauss <- read_rds(\"data/fit_gauss.rds\")"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"images","dir":"Articles","previous_headings":"","what":"Images","title":"Instructions for Writing R Tutorials","text":"add images tutorial, first make directory called images folder contains tutorial.Rmd. Store images tutorial . can work files usual ways. Use include_graphics() add image document. Include code chunk, place want image appear tutorial. include_graphics() part knitr package, need library(knitr) setup code chunk. Note need name code chunks. students complete tutorials using screens different widths, good idea put knitr::opts_chunk$set(.width = '90%') setup code chunk. way, images appear sensible size regardless whether students using phone screen big monitor.","code":"```{r} include_graphics(\"images/example.png\") ```"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"complex-text","dir":"Articles","previous_headings":"","what":"Complex text","title":"Instructions for Writing R Tutorials","text":"sometimes want include “complex” text tutorial. common trying teach students use R code chunks strings R markdown wants process certain ways. can sometimes get away placing text environments surrounded three, even four, backticks. plain three four backtick environments create plain code block content inside displayed -. syntax highlighting execution applied, show example code text exactly typed. Four backtick environments allow three backticks written within block. works often, always. Comments characters like # especially problematic. also use parsermd package behind scenes. work well one might like. complexity arises tutorials R markdown whereas work Quarto. Quarto documents (like vignette), can use environment started four backticks along {verbatim} ended four backticks. won’t work R markdown. <pre><code> trick solves problem. add code chunk tutorial. want display R code chunk nested inside four backticks environment, can replace four backticks <pre><code> like <pre><code> serves purpose four backticks displays R code chunks verbatim.","code":"<pre><code>```{r} 1 + 1 ```<\/code><\/pre> <pre><code> > tutorial.helpers::show_file(\"quarto-1.qmd\") --- title: \"Quarto 1\" author: David Kane format: html execute:    echo: false --- <pre><code>```{r} suppressPackageStartupMessages(library(tidyverse)) library(palmerpenguins) ```<\/code><\/pre> > <\/code><\/pre>"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"processing-submissions","dir":"Articles","previous_headings":"","what":"Processing submissions","title":"Instructions for Writing R Tutorials","text":"Instructors different needs priorities comes processing student answers. now, provide one function, tutorial.helpers::process_submissions() help . Read help page: ?process_submissions. many arguments options.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"checks","dir":"Articles","previous_headings":"","what":"Checks","title":"Instructions for Writing R Tutorials","text":"simplest way test tutorial.Rmd working run rmarkdown::render() file. function takes R Markdown document transforms single HTML file can open browser see tutorial appear users. can running: assumes located main directory .package, normally . approach may catch every possible error, identify many common issues runs quickly, making efficient way test tutorial. Remember replace file_path whatever directory name appropriate specific tutorial. ’re using Positron IDE, ’s important use Cmd/Ctrl + Shift + K shortcut, execute quarto render instead R Markdown rendering process actually need, since tutorials R Markdown documents rather Quarto documents. done editing tutorial, need make sure works submit pull request package maintainer. several ways checks: Type rmarkdown::render(\"file_path\") console. give file file name .html extension. Right click file select Open Browser. open webpage can check tutorial errors. smart use rmarkdown::render(\"file_path\") regularly since identify syntax errors quickly. good practice render completing exercise. full test, means running devtools::check(). equivalent R CMD check validates package structure, documentation, tests, compliance CRAN standards. good result 0 errors ✓ | 0 warnings ✓. Read error message carefully. always want see 0 errors ✓ | 0 warnings ✓ R CMD check results. , problem. error message often provide clue code error occurred. error message detailed enough, go .package.rcheck folder, located directory .package computer. folder created R CMD check process, automatically deleted check process succeeds. process fails, .package.rcheck folder stays around can examine . key file testthat.Rout.fail, tests directory. details went wrong. common source errors something wrong hint code chunks, evaluated just Run Document. Make sure eval = FALSE argument set code chunk hints. Test tutorial student’s perspective completing package checks following local testing workflow. can without hustle needing push changes main repository re-download package. First, temporarily disable renv running renv::deactivate() prevent installation conflicts can cause issues devtools::install(). Next, install local package using devtools::install() prompted updating packages, choose update everything ensure dependencies current. installation complete, run tutorial learnr::run_tutorial(\"tutorial_name\", \"your_package_name\"), replacing placeholder names actual tutorial package names. allows test tutorial clean environment similar students experience, checking code chunks run without errors, instructions clear, ’s dependence objects development environment. Finally, don’t forget reactivate renv running renv::activate() return managed environment. common issue author use package like ggthemes tutorial forget include library(ggthemes) setup code chunk. cause error checking ggthemes actually used tutorial — unless included test code chunk, — tutorial knits without problem. student tries type library(ggthemes) answer exercise gets error package installed. Note R CMD check seem catch cases library() package tutorial package DESCRIPTION. discrepancy cause error Github Actions , , access packages installed part test. careful way Github sloppy deals capitalization changes, especially change name file. example, might first commit file named Rproj.png. Later, decide change file names images lower case. , change name file rproj.png. Commit push. Everything great, right? ! Even Github shows new file name, might still file Rproj.png internally, capital “R.” cause errors run checks Github: file ! can see ! tests work local machine. easiest solution delete file (commit change). change name file something else use . R CMD check test tutorials default code chunks exactly Helper Tutorial template. , use template. either “Information” “Download answers” chunks missing, R CMD check return something like “Missing component part file /path///Rmd/file.Rmd”.","code":"rmarkdown::render(\"file_path\") Error: Cannot find the file(s): \"images/rproj.png\""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"test-before-submitting-a-pull-request","dir":"Articles","previous_headings":"","what":"Test before submitting a pull request","title":"Instructions for Writing R Tutorials","text":"done editing tutorial, need make sure works submit pull request package maintainer. several ways checks: Type rmarkdown::render(\"file_path\") console. give file file name .html extension. Right click file select Open Browser. open webpage can check tutorial errors. smart use rmarkdown::render(\"file_path\") regularly since identify syntax errors quickly. good practice render completing exercise. full test, means running devtools::check(). equivalent R CMD check validates package structure, documentation, tests, compliance CRAN standards. good result 0 errors ✓ | 0 warnings ✓.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"what-to-do-if-devtoolscheck-fails","dir":"Articles","previous_headings":"","what":"What to do if devtools::check() fails","title":"Instructions for Writing R Tutorials","text":"Read error message carefully. always want see 0 errors ✓ | 0 warnings ✓ R CMD check results. , problem. error message often provide clue code error occurred. error message detailed enough, go .package.rcheck folder, located directory .package computer. folder created R CMD check process, automatically deleted check process succeeds. process fails, .package.rcheck folder stays around can examine . key file testthat.Rout.fail, tests directory. details went wrong. common source errors something wrong hint code chunks, evaluated just Run Document. Make sure eval = FALSE argument set code chunk hints.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"try-out-the-tutorial-like-a-student","dir":"Articles","previous_headings":"","what":"Try out the tutorial like a student","title":"Instructions for Writing R Tutorials","text":"Test tutorial student’s perspective completing package checks following local testing workflow. can without hustle needing push changes main repository re-download package. First, temporarily disable renv running renv::deactivate() prevent installation conflicts can cause issues devtools::install(). Next, install local package using devtools::install() prompted updating packages, choose update everything ensure dependencies current. installation complete, run tutorial learnr::run_tutorial(\"tutorial_name\", \"your_package_name\"), replacing placeholder names actual tutorial package names. allows test tutorial clean environment similar students experience, checking code chunks run without errors, instructions clear, ’s dependence objects development environment. Finally, don’t forget reactivate renv running renv::activate() return managed environment.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"difficult-bugs","dir":"Articles","previous_headings":"","what":"Difficult bugs","title":"Instructions for Writing R Tutorials","text":"common issue author use package like ggthemes tutorial forget include library(ggthemes) setup code chunk. cause error checking ggthemes actually used tutorial — unless included test code chunk, — tutorial knits without problem. student tries type library(ggthemes) answer exercise gets error package installed. Note R CMD check seem catch cases library() package tutorial package DESCRIPTION. discrepancy cause error Github Actions , , access packages installed part test. careful way Github sloppy deals capitalization changes, especially change name file. example, might first commit file named Rproj.png. Later, decide change file names images lower case. , change name file rproj.png. Commit push. Everything great, right? ! Even Github shows new file name, might still file Rproj.png internally, capital “R.” cause errors run checks Github: file ! can see ! tests work local machine. easiest solution delete file (commit change). change name file something else use . R CMD check test tutorials default code chunks exactly Helper Tutorial template. , use template. either “Information” “Download answers” chunks missing, R CMD check return something like “Missing component part file /path///Rmd/file.Rmd”.","code":"Error: Cannot find the file(s): \"images/rproj.png\""},{"path":"https://ppbds.github.io/tutorial.helpers/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Kane. Author, maintainer, copyright holder.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kane D (2025). tutorial.helpers: Helper Functions Creating Tutorials. R package version 0.5.0.9007, https://ppbds.github.io/tutorial.helpers/.","code":"@Manual{,   title = {tutorial.helpers: Helper Functions for Creating Tutorials},   author = {David Kane},   year = {2025},   note = {R package version 0.5.0.9007},   url = {https://ppbds.github.io/tutorial.helpers/}, }"},{"path":[]},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"about-this-package","dir":"","previous_headings":"","what":"About this package","title":"Helper Functions for Creating Tutorials","text":"tutorial.helpers provides functions help write R tutorials, especially follow advice best way . approach currently used several packages, including r4ds.tutorials positron.tutorials.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Functions for Creating Tutorials","text":"install package CRAN: can install development version GitHub :","code":"install.packages(\"tutorial.helpers\") remotes::install_github(\"PPBDS/tutorial.helpers\")"},{"path":[]},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"download-answers","dir":"","previous_headings":"Useful tools","what":"Download answers","title":"Helper Functions for Creating Tutorials","text":"useful tool download answers trick. tutorial, simply include library(tutorial.helpers) setup R code chunk insert empty code chunk end. ask student provide estimate long tutorial took complete. provide ability download student’s answers html format. Students submit files instructors, can confirm work completed look patterns student (mis)understandings.","code":"```{r download-answers, child = system.file(\"child_documents/download_answers.Rmd\", package = \"tutorial.helpers\")} ```"},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"testing","dir":"","previous_headings":"Useful tools","what":"Testing","title":"Helper Functions for Creating Tutorials","text":"three exported functions checking tutorials package. See testing vignette details use.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"recommended-components","dir":"","previous_headings":"Useful tools","what":"Recommended components","title":"Helper Functions for Creating Tutorials","text":"recommend including child document start tutorial: insert (optional) questions asking student’s name, email id. also recommend including beginning tutorial: allows place button exercise allow students copy code previous exercise. Use: handy students series exercises requires build long pipe, line--line. recommend ending tutorial download-answers child document, discussed .","code":"```{r info-section, child = system.file(\"child_documents/info_section.Rmd\", package = \"tutorial.helpers\")} ``` ```{r copy-code-chunk, child = system.file(\"child_documents/copy_button.Rmd\", package = \"tutorial.helpers\")} ``` <button onclick = \"transfer_code(this)\">Copy previous code<\/button> ```{r download-answers, child = system.file(\"child_documents/download_answers.Rmd\", package = \"tutorial.helpers\")} ```"},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"tutorials","dir":"","previous_headings":"Useful tools","what":"Tutorials","title":"Helper Functions for Creating Tutorials","text":"package includes tutorial: “Tutorials Positron.” provides introduction tutorials beginning students. require students complete tutorial creating tutorials tutorial.helpers package. example, Positron, students run:","code":"learnr::run_tutorial(\"positron\", package = \"tutorial.helpers\")"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_current_tutorial.html","id":null,"dir":"Reference","previous_headings":"","what":"Check current tutorial — check_current_tutorial","title":"Check current tutorial — check_current_tutorial","text":"add-formatting tutorials. Uses format_tutorial() format tutorial Rmd open current editor","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_current_tutorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check current tutorial — check_current_tutorial","text":"","code":"check_current_tutorial()"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_key_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Key Variables in List of Tibbles — check_key_vars","title":"Check Key Variables in List of Tibbles — check_key_vars","text":"function checks specified key variables present tibble's \"id\" column returns tibbles contain required key variables.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_key_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Key Variables in List of Tibbles — check_key_vars","text":"","code":"check_key_vars(tibble_list, key_vars, verbose = FALSE)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_key_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Key Variables in List of Tibbles — check_key_vars","text":"tibble_list named list tibbles, containing \"id\" column question identifiers key_vars character vector key variables check verbose logical value (TRUE FALSE) specifying verbosity level. TRUE, reports tibbles removed .","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_key_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Key Variables in List of Tibbles — check_key_vars","text":"list tibbles contain required key variables","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_key_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Key Variables in List of Tibbles — check_key_vars","text":"","code":"if (FALSE) { # \\dontrun{ # Create sample data path <- file.path(find.package(\"tutorial.helpers\"), \"tests/testthat/fixtures/answers_html\")  tibble_list <- gather_submissions(path, \"stop\")  result <- check_key_vars(tibble_list,                           key_vars = c(\"name\", \"email\"))  } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_membership.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Membership in List of Tibbles — check_membership","title":"Check Membership in List of Tibbles — check_membership","text":"function filters list tibbles based whether key variable's value among membership values. first uses check_key_vars() ensure key variable exists, checks membership. Useful keeping specific students participants.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_membership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Membership in List of Tibbles — check_membership","text":"","code":"check_membership(tibble_list, key_var, membership, verbose = FALSE)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_membership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Membership in List of Tibbles — check_membership","text":"tibble_list named list tibbles, containing \"id\" column \"answer\" column key_var character string specifying key variable check membership character vector allowed values key variable verbose Logical indicating whether report removed items (default: FALSE)","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_membership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Membership in List of Tibbles — check_membership","text":"list tibbles key variable exists value membership list","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_membership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Membership in List of Tibbles — check_membership","text":"","code":"if (FALSE) { # \\dontrun{ # Create sample data with student emails path <- file.path(find.package(\"tutorial.helpers\"), \"tests/testthat/fixtures/answers_html\")  tibble_list <- gather_submissions(path, \"stop\")  result <- check_membership(tibble_list,                             key_var = \"email\",                             membership = c(\"bluebird.jack.xu@gmail.com\",                                            \"hassan.alisoni007@gmail.com\"))  } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_tutorial_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm that a tutorial has the recommended components — check_tutorial_defaults","title":"Confirm that a tutorial has the recommended components — check_tutorial_defaults","text":"Checks tutorials contain required libraries child documents. function looks library() calls child document inclusions tutorial files.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_tutorial_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm that a tutorial has the recommended components — check_tutorial_defaults","text":"","code":"check_tutorial_defaults(   tutorial_paths,   libraries = c(\"learnr\", \"tutorial.helpers\"),   children = c(\"info_section\", \"download_answers\") )"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_tutorial_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm that a tutorial has the recommended components — check_tutorial_defaults","text":"tutorial_paths Character vector paths tutorials examined. libraries Character vector library names loaded tutorial. function looks library(name) calls. Default c(\"learnr\", \"tutorial.helpers\"). children Character vector child document names (without .Rmd extension) included tutorial. function looks child document inclusion chunks. Default c(\"info_section\", \"download_answers\").","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_tutorial_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm that a tutorial has the recommended components — check_tutorial_defaults","text":"return value, called side effects.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_tutorial_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confirm that a tutorial has the recommended components — check_tutorial_defaults","text":"","code":"# Check with default requirements   check_tutorial_defaults(     tutorial_paths = return_tutorial_paths(\"tutorial.helpers\")   )      # Check for specific libraries only   check_tutorial_defaults(     tutorial_paths = return_tutorial_paths(\"tutorial.helpers\"),     libraries = c(\"learnr\", \"knitr\"),     children = c(\"copy_button\")   )"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_code_chunk_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the code chunk name of a new exercise in a tutorial. — determine_code_chunk_name","title":"Determine the code chunk name of a new exercise in a tutorial. — determine_code_chunk_name","text":"Determine code chunk name new exercise tutorial.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_code_chunk_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the code chunk name of a new exercise in a tutorial. — determine_code_chunk_name","text":"","code":"determine_code_chunk_name(file_path = NULL)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_code_chunk_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the code chunk name of a new exercise in a tutorial. — determine_code_chunk_name","text":"file_path Character string file path tutorial","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_code_chunk_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the code chunk name of a new exercise in a tutorial. — determine_code_chunk_name","text":"section id exercise based section","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_exercise_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the number of the next exercise in a tutorial — determine_exercise_number","title":"Finds the number of the next exercise in a tutorial — determine_exercise_number","text":"Finds number next exercise tutorial","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_exercise_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the number of the next exercise in a tutorial — determine_exercise_number","text":"","code":"determine_exercise_number(file_path = NULL)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_exercise_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the number of the next exercise in a tutorial — determine_exercise_number","text":"file_path Character string file path tutorial","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/determine_exercise_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the number of the next exercise in a tutorial — determine_exercise_number","text":"next exercise number based file argument active document.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/download_google_drive.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Files from Google Drive Folder — download_google_drive","title":"Download Files from Google Drive Folder — download_google_drive","text":"Downloads files filtered files public Google Drive folder local directory.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/download_google_drive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Files from Google Drive Folder — download_google_drive","text":"","code":"download_google_drive(url, path = NULL, title = NULL)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/download_google_drive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Files from Google Drive Folder — download_google_drive","text":"url Character string. Google Drive folder URL download files. function extract folder ID standard Google Drive folder URLs. path Character string NULL. local directory path files downloaded. NULL (default), files downloaded current working directory. function create directory exist. title Character vector NULL. Patterns match file names filtering. provided, files whose names contain patterns downloaded. Pattern matching case-insensitive. NULL (default), files downloaded.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/download_google_drive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Files from Google Drive Folder — download_google_drive","text":"Character string. path directory files downloaded.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/download_google_drive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Files from Google Drive Folder — download_google_drive","text":"","code":"if (FALSE) { # \\dontrun{ # Download all files from a Google Drive folder to current directory download_google_drive(\"https://drive.google.com/drive/folders/1Rgxfiw\")  # Download to a specific directory download_google_drive(   url = \"https://drive.google.com/drive/folders/1Rgxfiw\",   path = \"/home/user/downloads\" )  # Download only files matching specific patterns download_google_drive(   url = \"https://drive.google.com/drive/folders/1Rgxfiw\",   title = c(\"report\", \"data\", \".csv\") )  # Download filtered files to specific directory result_path <- download_google_drive(   url = \"https://drive.google.com/drive/folders/1Rgxfiw\",   path = \"./my_data\",   title = c(\"analysis\", \"results\") ) } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/ensure_quarto.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Quarto Availability — ensure_quarto","title":"Check Quarto Availability — ensure_quarto","text":"function ensures quarto available needed rendering.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/ensure_quarto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Quarto Availability — ensure_quarto","text":"","code":"ensure_quarto()"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/exercise_creation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a tutorial code exercise or question to the active document — make_exercise","title":"Add a tutorial code exercise or question to the active document — make_exercise","text":"writing tutorials, handy able insert skeleton new code exercise question. Note function determines correct exercise number use also adds appropriate code chunk names, based exercise number section title.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/exercise_creation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a tutorial code exercise or question to the active document — make_exercise","text":"","code":"make_exercise(type = \"no-answer\", file_path = NULL)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/exercise_creation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a tutorial code exercise or question to the active document — make_exercise","text":"type Character question type. Must one \"code\", \"-answer\", \"yes-answer\". Abbreviations \"\", \"yes\", \"co\" allowed. file_path Character path file. NULL, RStudio active document used, default behavior. actual file path used testing.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/exercise_creation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a tutorial code exercise or question to the active document — make_exercise","text":"Exercise skeleton corresponding type argument.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":null,"dir":"Reference","previous_headings":"","what":"Format RMarkdown tutorial code chunks — format_tutorial","title":"Format RMarkdown tutorial code chunks — format_tutorial","text":"function processes R Markdown tutorial file standardize code chunk labels based section names exercise numbers. also renumbers exercises sequentially within section fixes spacing topic headers.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format RMarkdown tutorial code chunks — format_tutorial","text":"","code":"format_tutorial(file_path)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format RMarkdown tutorial code chunks — format_tutorial","text":"file_path Character string. Path R Markdown file process.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format RMarkdown tutorial code chunks — format_tutorial","text":"Character string containing formatted R Markdown content.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format RMarkdown tutorial code chunks — format_tutorial","text":"function applies following formatting rules: Topic headers (# headers) spacing standardized Exercises renumbered sequentially within section Code chunks relabeled according pattern: section-name-exercise-number Chunks eval = FALSE receive -hint-N suffix Chunks include = FALSE receive -test suffix Chunks label \"setup\" modified Chunks \"file\" option modified Unlabeled chunks without key options modified formatted chunks preserve original options Content quadruple backticks ( ) preserved untouched","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/gather_submissions.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather Submissions — gather_submissions","title":"Gather Submissions — gather_submissions","text":"function finds reads HTML/XML files local directory Google Drive folder match specified patterns. extracts tables files returns list tibbles containing submission data.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/gather_submissions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather Submissions — gather_submissions","text":"","code":"gather_submissions(path, title, keep_loc = NULL, verbose = FALSE)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/gather_submissions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather Submissions — gather_submissions","text":"path path local directory containing HTML/XML files, Google Drive folder URL. Google Drive URL, function download entire folder temporary directory. title character vector patterns match file names. pattern processed separately results combined. keep_loc character string specifying save downloaded files (Google Drive URLs). NULL (default), files downloaded temporary directory deleted processing. specified, files downloaded location kept. verbose logical value (TRUE FALSE) specifying verbosity level. TRUE, reports files removed processing.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/gather_submissions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather Submissions — gather_submissions","text":"named list tibbles, tibble contains data one HTML/XML file matches specified patterns valid table structure.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/gather_submissions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gather Submissions — gather_submissions","text":"Google Drive allows one file exact name. download files manually (\"hand\"), get files one automatically renamed browser. However, use Google Drive functionality function, second file overwrite first, potentially resulting data loss.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/gather_submissions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather Submissions — gather_submissions","text":"","code":"if (FALSE) { # \\dontrun{ # Find submissions from local directory  path <- file.path(find.package(\"tutorial.helpers\"), \"tests/testthat/fixtures/answers_html\")  tibble_list <- gather_submissions(path = path, title = \"stop\", verbose = TRUE)  # Find submissions from Google Drive folder (temporary download) drive_url <- \"https://drive.google.com/drive/folders/your_folder_id\" tibble_list <- gather_submissions(   path = drive_url,    title = c(\"probability\") )  # Find submissions from Google Drive folder (keep files) tibble_list <- gather_submissions(   path = drive_url,    title = c(\"probability\"),   keep_loc = \"~/my_downloads/\" ) } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list of tutorial answers — get_submissions_from_learnr_session","title":"Return a list of tutorial answers — get_submissions_from_learnr_session","text":"Grabs information learnr session environment, directly session object . Since using session environment, currently (?) way save environment hence test function.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list of tutorial answers — get_submissions_from_learnr_session","text":"","code":"get_submissions_from_learnr_session(sess)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a list of tutorial answers — get_submissions_from_learnr_session","text":"sess session object shiny learnr","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list of tutorial answers — get_submissions_from_learnr_session","text":"list includes exercise submissions tutorial","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/knit_tutorials.html","id":null,"dir":"Reference","previous_headings":"","what":"Knit a set of tutorials — knit_tutorials","title":"Knit a set of tutorials — knit_tutorials","text":"define \"testing\" tutorial (successfully) running render() . function renders tutorials provided tutorial_paths. check see rendered file looks OK. tutorial fails render, (assume!) error generated filter testing rig.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/knit_tutorials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knit a set of tutorials — knit_tutorials","text":"","code":"knit_tutorials(tutorial_paths)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/knit_tutorials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knit a set of tutorials — knit_tutorials","text":"tutorial_paths Character vector paths tutorials knitted.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/knit_tutorials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Knit a set of tutorials — knit_tutorials","text":"return value, called side effects.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/knit_tutorials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Knit a set of tutorials — knit_tutorials","text":"","code":"knit_tutorials(tutorial_paths = return_tutorial_paths(\"tutorial.helpers\")) #>  #>  #> processing file: tutorial.Rmd #> 1/53                      #> 2/53 [setup]              #> 3/53                      #> 4/53 [copy-code-chunk]    #>  #>  #> processing file: /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/tutorial.helpers/child_documents/copy_button.Rmd #> 1/3 [change-code]       #> 2/3                     #> 3/3 [observe-transfers] #> 5/53                      #> 6/53 [unnamed-chunk-1]    #> 7/53                      #> 8/53 [unnamed-chunk-2]    #> 9/53                      #> 10/53 [info-section]       #>  #>  #> processing file: /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/tutorial.helpers/child_documents/info_section.Rmd #> 1/6         #> 2/6 [name]  #> 3/6         #> 4/6 [email] #> 5/6         #> 6/6 [ID]    #> 11/53                      #> 12/53 [unnamed-chunk-3]    #> 13/53                      #> 14/53 [exercises-1]        #> 15/53                      #> 16/53 [exercises-1-hint-1] #> 17/53                      #> 18/53 [unnamed-chunk-4]    #> 19/53                      #> 20/53 [exercises-2]        #> 21/53                      #> 22/53 [exercises-2-hint-1] #> 23/53                      #> 24/53 [exercises-3]        #> 25/53                      #> 26/53 [exercises-3-hint-1] #> 27/53                      #> 28/53 [unnamed-chunk-5]    #> 29/53                      #> 30/53 [exercises-5]        #> 31/53                      #> 32/53 [unnamed-chunk-6]    #> 33/53                      #> 34/53 [unnamed-chunk-7]    #> 35/53                      #> 36/53 [exercises-7]        #> 37/53                      #> 38/53 [exercises-8]        #> 39/53                      #> 40/53 [exercises-9]        #> 41/53                      #> 42/53 [exercises-10]       #> 43/53                      #> 44/53 [exercises-11]       #> 45/53                      #> 46/53 [exercises-12]       #> 47/53                      #> 48/53 [exercises-12-test]  #> 49/53                      #> 50/53 [exercises-13]       #> 51/53                      #> 52/53 [download-answers]   #>  #>  #> processing file: /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/tutorial.helpers/child_documents/download_answers.Rmd #> 1/6                    #> 2/6 [minutes]          #> 3/6                    #> 4/6 [unnamed-chunk-38] #> 5/6                    #> 6/6 [unnamed-chunk-39] #> 53/53                      #> output file: /tmp/RtmpAwatiT/tutorial.knit.md #> /opt/hostedtoolcache/pandoc/3.1.11/x64/pandoc +RTS -K512m -RTS /tmp/RtmpAwatiT/tutorial.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /tmp/RtmpAwatiT/tutorial.html --lua-filter /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmarkdown/lua/latex-div.lua --variable bs3=TRUE --standalone --section-divs --template /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --section-divs --reference-location=section --template /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/rmarkdown/templates/tutorial/resources/tutorial-format.htm --no-highlight --variable highlightjs=1 --variable progressive=true --variable allow-skip=true --variable learnr-version=0.11.5 --id-prefix section- --variable theme=cerulean --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/rmarkdown/rmd/h/shiny-header.html  #>  #> Output created: /tmp/RtmpAwatiT/tutorial.html #> ── Skip: Rendering /home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/tutorial.helpers/tutorials/getting-started/tutorial.Rmd ── #> Reason: empty test #>  #> NULL"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/match_questions.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Questions by Pattern — match_questions","title":"Match Questions by Pattern — match_questions","text":"function takes single HTML file tibble finds questions/answers contain specified pattern. returns question IDs ('id' column) rows answer contains pattern.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/match_questions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Questions by Pattern — match_questions","text":"","code":"match_questions(x, pattern, ignore.case = TRUE)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/match_questions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Questions by Pattern — match_questions","text":"x Either file path HTML file tibble 'id' 'answer'/'data' columns pattern character string search answers ignore.case Logical; search case-insensitive? (default: TRUE)","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/match_questions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Questions by Pattern — match_questions","text":"character vector question IDs answer contains pattern","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/match_questions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Questions by Pattern — match_questions","text":"","code":"if (FALSE) { # \\dontrun{ # Search in an HTML file question_ids <- match_questions(\"path/to/submission.html\", \"temperance\") # Returns: c(\"temperance-16\", \"temperance-19\")  # Search in a tibble  path <- file.path(find.package(\"tutorial.helpers\"), \"tests/testthat/fixtures/answers_html\")  tibble <- gather_submissions(path, title = \"stop\")[[1]]  result <- match_questions(tibble, \"http\") } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all the paths to the tutorials in a package — return_tutorial_paths","title":"Return all the paths to the tutorials in a package — return_tutorial_paths","text":"Takes package name returns character vector paths tutorials installed package. Assumes every Rmd file inst/tutorials/*/ tutorial, true.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all the paths to the tutorials in a package — return_tutorial_paths","text":"","code":"return_tutorial_paths(package)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all the paths to the tutorials in a package — return_tutorial_paths","text":"package Character vector package name tested.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all the paths to the tutorials in a package — return_tutorial_paths","text":"Character vector full paths installed tutorials package.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all the paths to the tutorials in a package — return_tutorial_paths","text":"","code":"return_tutorial_paths('learnr') #>  [1] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/ex-data-basics/ex-data-basics.Rmd\"             #>  [2] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/ex-data-filter/ex-data-filter.Rmd\"             #>  [3] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/ex-data-mutate/ex-data-mutate.Rmd\"             #>  [4] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/ex-data-summarise/ex-data-manip-summarise.Rmd\" #>  [5] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/ex-setup-r/ex-setup-r.Rmd\"                     #>  [6] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/hello/hello.Rmd\"                               #>  [7] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/polyglot/polyglot.Rmd\"                         #>  [8] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/quiz_question/quiz_question.Rmd\"               #>  [9] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/setup-chunks/setup-chunks.Rmd\"                 #> [10] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/slidy/slidy.Rmd\"                               #> [11] \"/home/runner/.cache/R/renv/library/tutorial.helpers-cdd4ef10/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu/learnr/tutorials/sql-exercise/sql-exercise.Rmd\""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_binary_only_in_r_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Set pkgType to binary in .Rprofile — set_binary_only_in_r_profile","title":"Set pkgType to binary in .Rprofile — set_binary_only_in_r_profile","text":"functions sets pkgType global option \"binary\" .Rprofile. New R users, especially Windows, never install source. fails often, confusingly. also sets value R session. , need either restart R source .Rprofile hand. can examine .Rprofile confirm change usethis::edit_r_profile()","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_binary_only_in_r_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set pkgType to binary in .Rprofile — set_binary_only_in_r_profile","text":"","code":"set_binary_only_in_r_profile()"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_binary_only_in_r_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set pkgType to binary in .Rprofile — set_binary_only_in_r_profile","text":"return value, called side effects.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_positron_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Positron Settings — set_positron_settings","title":"Configure Positron Settings — set_positron_settings","text":"Locates creates Positron settings.json file Windows macOS, updates settings based provided configuration list. Users can specify settings like RStudio keyboard shortcuts. function can also optionally configure binary package preferences .Rprofile.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_positron_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Positron Settings — set_positron_settings","text":"","code":"set_positron_settings(   home_dir = path.expand(\"~\"),   set.binary = TRUE,   positron_settings = list() )"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_positron_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Positron Settings — set_positron_settings","text":"home_dir Optional character string specifying base directory use user's home directory. Defaults path.expand(\"~\"). Useful testing custom setups. set.binary Logical, defaults TRUE. TRUE, runs set_binary_only_in_r_profile() applying settings configure binary options R profile. positron_settings List settings apply. Can structured list lists sub-list contains setting name value (e.g., list(list(\"rstudio.keymap.enable\", TRUE))), named list (e.g., list(\"rstudio.keymap.enable\" = TRUE)). Defaults empty list, means settings changed.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_positron_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Positron Settings — set_positron_settings","text":"Invisible NULL. function's purpose side effect: modifying creating settings.json file. also prints messages console indicating actions taken.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_positron_settings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure Positron Settings — set_positron_settings","text":"function uses jsonlite package handle JSON operations creates necessary directory structure exist. designed work cross-platform detecting operating system constructing appropriate file path Positron's user settings. function applies settings provided positron_settings parameter. default, settings changed unless explicitly specified.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/set_positron_settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Positron Settings — set_positron_settings","text":"","code":"if (FALSE) { # \\dontrun{   # Apply no settings changes, but ensure settings.json exists   set_positron_settings()      # Enable RStudio keyboard shortcuts using list of lists structure   set_positron_settings(     positron_settings = list(list(\"rstudio.keymap.enable\", TRUE))   )      # Enable RStudio keyboard shortcuts using named list structure   set_positron_settings(     positron_settings = list(\"rstudio.keymap.enable\" = TRUE)   )      # Apply multiple settings using named list   set_positron_settings(     positron_settings = list(       \"rstudio.keymap.enable\" = TRUE,       \"editor.wordWrap\" = \"on\"     )   )      # Apply settings with a custom home directory and disable binary setting   set_positron_settings(     home_dir = tempdir(),      set.binary = FALSE,     positron_settings = list(\"rstudio.keymap.enable\" = TRUE)   ) } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/show_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the contents of a text file that match a pattern — show_file","title":"Display the contents of a text file that match a pattern — show_file","text":"function reads contents text file either prints specified range rows match given regular expression pattern prints code lines within R code chunks. start negative number, prints last abs(start) lines, ignoring missing lines end file.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/show_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the contents of a text file that match a pattern — show_file","text":"","code":"show_file(path, start = 1, end = NULL, pattern = NULL, chunk = \"None\")"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/show_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the contents of a text file that match a pattern — show_file","text":"path character vector representing path text file. start integer specifying starting row number (inclusive) consider. Default 1. negative, represents number lines print end file. end integer specifying ending row number (inclusive) consider. Default last row. pattern regular expression pattern match row. Default NULL (pattern matching). chunk character string indicating whether print code lines within R code chunks. Possible values \"None\" (default), \"\" (print code chunks), \"Last\" (print last code chunk).","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/show_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the contents of a text file that match a pattern — show_file","text":"function prints contents specified range rows match pattern (provided) code lines within R code chunks (chunk TRUE) console. rows match pattern, nothing printed. start negative, function prints last abs(start) lines, ignoring missing lines end file.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/show_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the contents of a text file that match a pattern — show_file","text":"","code":"if (FALSE) { # \\dontrun{ # Display all rows of a text file show_file(\"path/to/your/file.txt\")  # Display rows 5 to 10 of a text file show_file(\"path/to/your/file.txt\", start = 5, end = 10)  # Display all rows of a text file that contain the word \"example\" show_file(\"path/to/your/file.txt\", pattern = \"example\")  # Print code lines within R code chunks show_file(\"path/to/your/file.txt\", chunk = TRUE)  # Display the last 5 lines of a text file, ignoring missing lines at the end show_file(\"path/to/your/file.txt\", start = -5) } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Tutorial submission functions — submission_server","title":"Tutorial submission functions — submission_server","text":"Provides core Shiny server UI hooks collecting downloading student answers learnr tutorial. submission_server() called Rmd code chunk context=\"server\". function modified Colin Rundel's learnrhash package (https://github.com/rundel/learnrhash). UI block include download button simple instructions students.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tutorial submission functions — submission_server","text":"","code":"submission_server()  submission_ui"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tutorial submission functions — submission_server","text":"object class shiny.tag length 3.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tutorial submission functions — submission_server","text":"return value; called side effects Shiny/learnr session. object class shiny.tag","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tutorial submission functions — submission_server","text":"server function uses Shiny downloadHandler let students download answers. main logic must wrapped local() parent.frame() ensure access live learnr session objects created parent environment. session object (created Shiny) available inside downloadHandler$content function, test-case extraction answer writing must happen . reference: file argument content temporary file path created Shiny, handler's job write downloadable file . want generate test fixtures, insert browser() inside content function, use functions like get_submissions_from_learnr_session(session) prompt. See also: https://mastering-shiny.org/action-transfer.html#downloading-reports","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tutorial submission functions — submission_server","text":"","code":"if(interactive()){   submission_server() }  if(interactive()){   submission_ui }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_answers.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Answers from Submissions with Filtering — submissions_answers","title":"Extract Answers from Submissions with Filtering — submissions_answers","text":"function gathers submissions matching title pattern, filters membership, extracts specified variables, returning tibble one row per valid submission one column per variable.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_answers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Answers from Submissions with Filtering — submissions_answers","text":"","code":"submissions_answers(   path,   title,   key_var = NULL,   membership = NULL,   vars,   keep_file_name = NULL,   verbose = FALSE )"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_answers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Answers from Submissions with Filtering — submissions_answers","text":"path path local directory Google Drive folder URL containing submissions title character vector patterns match file names (passed gather_submissions) key_var character string specifying key variable check membership (e.g., \"email\"). NULL (default), membership filtering applied. membership character vector allowed values key variable, \"*\" include submissions. NULL (default), membership filtering applied. Ignored key_var NULL. vars character vector variables/questions extract, \"*\" extract available variables keep_file_name handle file names: NULL (include), \"\" (full name), \"Space\" (first space), \"Underscore\" (first underscore) verbose logical value (TRUE FALSE) specifying verbosity level. TRUE, reports files removed processing.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_answers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Answers from Submissions with Filtering — submissions_answers","text":"tibble one row per valid submission, columns variable, optionally \"source\" column","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_answers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Answers from Submissions with Filtering — submissions_answers","text":"","code":"if (FALSE) { # \\dontrun{ # Extract specific variables from submissions matching title pattern path <- file.path(find.package(\"tutorial.helpers\"), \"tests/testthat/fixtures/answers_html\")  result <- submissions_answers(   path = path,   title = c(\"stop\"),    key_var = \"email\",   membership = c(\"bluebird.jack.xu@gmail.com\", \"abdul.hannan20008@gmail.com\"),   vars = c(\"name\", \"email\", \"introduction-1\"),   verbose = TRUE )  # Extract all variables from submissions result_all <- submissions_answers(   path = path,   title = c(\"stop\"),    key_var = \"email\",   membership = c(\"bluebird.jack.xu@gmail.com\", \"abdul.hannan20008@gmail.com\"),   vars = \"*\",   verbose = TRUE ) } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Submissions Summary — submissions_summary","title":"Process Submissions Summary — submissions_summary","text":"function processes submissions local directory Google Drive folder containing HTML/XML files. extracts tables files, filters based pattern key variables, returns either summary tibble combined tibble data.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Submissions Summary — submissions_summary","text":"","code":"submissions_summary(   path,   title = \".\",   return_value = \"Summary\",   key_vars = NULL,   verbose = FALSE,   keep_file_name = NULL,   emails = NULL )"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Submissions Summary — submissions_summary","text":"path path local directory containing HTML/XML files, Google Drive folder URL. Google Drive URL, function download individual files temporary directory. title character vector patterns match file names (default: \".\"). pattern processed separately results combined. return_value type value return. Allowed values \"Summary\" (default) \"\". key_vars character vector key variables extract \"id\" column (default: NULL). verbose logical value (TRUE FALSE) specifying verbosity level. TRUE, reports files removed processing. keep_file_name Specifies whether keep file name summary tibble. Allowed values NULL (default), \"\" (keep entire file name), \"Space\" (keep first space), \"Underscore\" (keep first underscore). used return_value \"Summary\". emails character vector email addresses filter results , \"*\" include emails, NULL skip email filtering (default: NULL).","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Submissions Summary — submissions_summary","text":"return_value \"Summary\", returns tibble one row file, columns corresponding key_vars, additional \"answers\" column indicating number rows tibble. return_value \"\", returns tibble data combined files.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submissions_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Submissions Summary — submissions_summary","text":"","code":"if (FALSE) { # \\dontrun{ # Process submissions from local directory path <- file.path(find.package(\"tutorial.helpers\"), \"tests/testthat/fixtures/answers_html\")  result <- submissions_summary(path = path,                              key_vars = \"email\",                              title = \"stop\")  } # }"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/write_answers.html","id":null,"dir":"Reference","previous_headings":"","what":"Write tutorial answers to file — write_answers","title":"Write tutorial answers to file — write_answers","text":"Take tutorial session (submission list), extract submitted answers, write HTML file answers.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/write_answers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write tutorial answers to file — write_answers","text":"","code":"write_answers(file, obj)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/write_answers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write tutorial answers to file — write_answers","text":"file Output file path (end .html). obj Either Shiny session object (learnr) list submissions (returned get_submissions_from_learnr_session()).","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-development-version","dir":"Changelog","previous_headings":"","what":"tutorial.helpers (development version)","title":"tutorial.helpers (development version)","text":"Edit “Instructions” vignette. title argument process_submissions() now accepts vector. Remove RStudio material, including addins. Create find_submissions(). changed pattern argument title. emails argument added process_submissions(). path can take access public google drive links. Rename tutorial “Getting Started.” Change check_tutorial_defaults() make flexible.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-050","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.5.0","title":"tutorial.helpers 0.5.0","text":"CRAN release: 2025-05-11 make_exercise() longer includes ‘-ex’ code chunk labels exercises. Fix format_tutorial() bugs.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-042","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.4.2","title":"tutorial.helpers 0.4.2","text":"CRAN release: 2025-03-05 Change original tutorial title “Tutorials RStudio.” Add new tutorial: “Tutorials Positron.” Add set_positron_settings() function. Rewrite format_tutorial() use parsermd package.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-031","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.3.1","title":"tutorial.helpers 0.3.1","text":"CRAN release: 2024-12-07 Clean “Instructions Writing R Tutorials” vignette. Revise “Getting Started Tutorials” tutorial.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-030","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.3.0","title":"tutorial.helpers 0.3.0","text":"CRAN release: 2024-06-26 Add show_file(). Add process_submissions(). Remove ability save answers either RDS PDF files.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-027","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.7","title":"tutorial.helpers 0.2.7","text":"CRAN release: 2024-05-06 Get test cases format_tutorial() working . Fix format_tutorial() deal changes parsermd 0.1.3. Setting rmd_viewer_type “pane” within set_rstudio_settings(), per suggestion Jade Cao. Add “ID” field default information page. Change tutorial title “Getting Started Tutorials.” Give set_rstudio_settings() set.binary argument set TRUE default, causing function run set_binary_only_in_r_profile() end. handy “Getting Started Tutorials”” tutorial. Remove “Getting Started Tutorials” shinyapps.io.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-026","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.6","title":"tutorial.helpers 0.2.6","text":"CRAN release: 2024-01-16 Add determine_code_chunk_name() determine_exercise_number() functions make_exercise() manageable. Update logic determine_code_chunk_name() handle forward slashes ending dashes better. Add test case write_answers(). Add associated files .Rbuildignore violate CRAN size restriction 5 mb. Add vignette downloading answers. Reorder five vignettes Articles menu. Add Spanish translation Getting Started tutorial. Thanks @xavidp! Add several settings changes set_rstudio_settings(). set changes now quite extensive, seems best approach ensuring new students best possible learning environment. Rewrite set_rstudio_settings() report changes made settings.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-025","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.5","title":"tutorial.helpers 0.2.5","text":"CRAN release: 2023-05-21 Remove test case write_answers() meet 5 mb maximum package size.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-024","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.4","title":"tutorial.helpers 0.2.4","text":"Add test case write_answers(). Fix (really!) error CRAN Debian systems (caused attempts write user library) setting intermediates_dir argument tempdir() call render() within knit_tutorials().","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-023","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.3","title":"tutorial.helpers 0.2.3","text":"CRAN release: 2023-05-12 Fix error Debian systems caused attempts write user library. Thanks Kurt Hornik pointing problem. Create “Rstudio Addins” vignette. Create “Testing Package Tutorials” vignette. Create “Tutorials Books” vignette. Fix error downloading files exporting write_answers(). Thanks Xavier de Pedro Puente report.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-022","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.2","title":"tutorial.helpers 0.2.2","text":"CRAN release: 2023-05-08 Replace /dontrun{} (interactive()){}. Fix return value submission_server().","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-021","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.1","title":"tutorial.helpers 0.2.1","text":"Changes CRAN submission.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-020","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.2.0","title":"tutorial.helpers 0.2.0","text":"Add examples return values exported functions.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-012","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.1.2","title":"tutorial.helpers 0.1.2","text":"Move prep_rstudio_settings() r4ds.tutorials. Publish Getting Started tutorial Shiny Apps adjust _pkgdown.yml make use .","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-011","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.1.1","title":"tutorial.helpers 0.1.1","text":"Add prep_rstudio_settings(). Add Getting Started tutorial. Change copy_button use base R.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/news/index.html","id":"tutorialhelpers-010","dir":"Changelog","previous_headings":"","what":"tutorial.helpers 0.1.0","title":"tutorial.helpers 0.1.0","text":"Basic working version. Big code clean since spinning .primer.tutorials package. Revise test cases. Centralize answers creation write_answers(). Added NEWS.md file track changes package.","code":""}]
