[{"path":"https://ppbds.github.io/tutorial.helpers/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tutorial.helpers authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"package-locations","dir":"Articles","previous_headings":"","what":"Package locations","title":"Technical Details","text":"Keep mind (least) two versions .tutorial.package installed machine. case (using .primer.tutorials), first default location packages. things go unless something special. second installed renv, used within .primer.tutorials project. working .primer.tutorials project, generally , renv version .primer.tutorials library using. can check running .libPaths(). Whenever library() package, R looks , order, values returned .libPaths(). renv sets things first item collection packages. Note placed weird location, including temp directory name .primer.tutorials-07f29d85. sure renv decided create new one . delete old ones. case major breakdowns, deleting directories hand can fix things.","code":"> /Library/Frameworks/R.framework/Versions/4.1/Resources/library > /Users/dkane/Library/Caches/org.R-project.R/R/renv/library/all.primer.tutorials-07f29d85/R-4.2/aarch64-apple-darwin20\" > .libPaths() [1] \"/Users/dkane/Library/Caches/org.R-project.R/R/renv/library/all.primer.tutorials-07f29d85/R-4.2/aarch64-apple-darwin20\" [2] \"/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"yaml-and-setup-code-chunk","dir":"Articles","previous_headings":"","what":"YAML and setup code chunk","title":"Technical Details","text":"top file look like text .  Every tutorial must load learnr package order function. library(tutorial.helpers) always included contains file, submissions_functions.R, enables answer downloading. may need add packages used tutorial. packages also need included DESCRIPTION file. echo = FALSE handy default , time, don’t show users code. Setting tutorial.exercise.timelimit 60 seconds safe, probably necessary. tutorial.storage must set local ensure user work saved sessions. 2 code chunks load code “Copy Code” button Information section. remove code chunks. information section copy code button crucial infrastructure tutorial code chunks allow us implement easily without taking much space.","code":""},{"path":[]},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"current-process","dir":"Articles","previous_headings":"Copy Code Trickery","what":"Current Process","title":"Technical Details","text":"order implement copy-pasting exercise, need add line <button onclick = \"transfer_code()\">Copy previous code<\/button> either exercise want copy-paste . add button looks like :  user just needs click button order copy code previous exercise current one.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"possible-improvements","dir":"Articles","previous_headings":"Copy Code Trickery","what":"Possible Improvements","title":"Technical Details","text":"Personally, think current solution close ideal solution. downsides 1) tutorial makers still include something exercises 2) button look much better toolbar section exercise, next \"Start \" “hint” . However, possibility automatically copying code clipboard clicking \"Run Code\" button yet explored offer better solution.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"comments-on--rbuildignore","dir":"Articles","previous_headings":"","what":"Comments on .Rbuildignore","title":"Technical Details","text":"reason, impossible include comments .Rbuildignore, least using “#” symbol. think key issue using * (maybe parenthesis) line begins # causes trouble. Regardless, thoughts current version. like ensure junk files end tutorials/* directories included build. files often large. also run risk messing things might cause certain tests pass us fail anyone downloads Github. (.gitignore file reasonable ensuring files end Github.) key line : excludes everything subdirectory tutorials directory except images directory (file named images also included) data directory file suffixed .Rmd.","code":"tutorials/[^/]*/(?!(data|images|.*Rmd))"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"adding-more-libraries","dir":"Articles","previous_headings":"","what":"Adding more libraries","title":"Technical Details","text":"using new library, several things need check. First, obviously, install package within primer.tutorials directory. Second, must use library(X) setup chunk within tutorial.Rmd . Third, need run renv::status(). report new package part renv.lock. , need run renv::snapshot() renv.lock file updated. Fourth, need add package DESCRIPTION file, Imports: section. (don’t forget comma .) don’t , R CMD check might work computer, library X already installed, won’t work Github actions since R relies DESCRIPTION file know packages install. seen weird situations even work. required hack install new package main (default) library. Now, seems weird help since, renv, never using location. suspect bug involved interaction R CMD check renv.","code":""},{"path":[]},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"submission-functions","dir":"Articles","previous_headings":"Tour of the Package Functions","what":"Submission Functions","title":"Technical Details","text":"submission_ui HTML structure defined shiny, inserted end every tutorial. creates buttons download submission reports forms RDS HTML. submission_server() function communicates shiny server tutorial. provides download functions, downloadHtml downloadRds, user interface call downloading submission reports.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"submission-helper-functions","dir":"Articles","previous_headings":"Tour of the Package Functions","what":"Submission Helper Functions","title":"Technical Details","text":"build_html function creates downloads tibble report tutorial submissions HTML. build_rds function creates downloads tibble report tutorial submissions RDS. create_tibble_from_submissions function takes tutorial submissions creates formatted tibble columns: id, submission type, answer. submissions arranged order questions appear tutorial get_label_list function gets appearance order questions tutorial. get_submissions_from_learnr_session function gets submissions current tutorial session learnr functions, specifically learnr:::get_all_state_objects() learnr::submissions_from_state_objects(). returns list submission objects, containing details question answer.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"add-in-functions","dir":"Articles","previous_headings":"Tour of the Package Functions","what":"Add-in Functions","title":"Technical Details","text":"format_tutorial function takes tutorial path formats code chunk labels standardized format. check_current_tutorial add-function runs format_tutorial() current opened tutorial. handy add-tutorial makers want make sure chunk labels correct. make_new_exercise add-function creates code exercise correctly formatted labels general structure. make_new_q_no_answer add-function creates question exercise answer display correctly formatted labels general structure. make_new_q_with_answer add-function creates question exercise answer display correctly formatted labels general structure.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"permanent-objects","dir":"Articles","previous_headings":"","what":"Permanent objects","title":"Technical Details","text":"Permanent objects avoided, possible. problem Exercise code chunk “world.” knows nothing actions taken previous code chunks, except three exceptions: objects created global “setup” code chunk available Exercise code chunks. annoying thing option , ideally like obects created near — Rmd — Exercises use . also means can use names like “fit_1” “pp” tutorial. Objects created setup chunk just one exercise. Objects created code chunk referenced using exercise.setup code chunk option Exercise needs access objects. probably best approach. regular code chunks neither Exercise code chunks setup chunks. objects created persist? Maybe! Sometimes!? sense objects available tutorial knitted. can show plot end Section creating start. objects available run time, seen Exercises. aspect tutorials given us trouble permanent objects. particular, sometimes seems like things work Run Document Run Tutorial. Since students always latter, need test way well.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/details.html","id":"verbatim-code-chunks","dir":"Articles","previous_headings":"","what":"Verbatim Code Chunks","title":"Technical Details","text":"See advice use verbatim R code chunks within R Markdown document, document.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Instructions for Writing Tutorials","text":"Imagine shallowest possible learning curve. Almost every student able answer almost every Exercise, albeit perhaps help Hint. hard questions. fact, really aren’t questions . Instead, instructions: one thing, next, next. Assume giving student private lesson. ask question. give answer. say next? want teach , given context? million little bits R knowledge might provide students: tips, tricks, cool packages, fun websites, et cetera. don’t time mention . art teaching , first, decide 10,000 bits important mention second, figure best time mention . Tutorials key mentioning. bits mention mention ? can demonstrate tiny percentage packages world, can certainly least mention existence dozens . Within packages use, can demonstrate functions; can mention use. Among functions use, can show arguments; can discuss others. important parts “knowledge drops” pepper tutorials , first, packages/functions/arguments mention without demonstrating, second, links high quality resources. building “pit success.” Generally, students don’t assigned reading, least large class. However, complete required work. assigned tutorials. promise: complete tutorials, become data scientist. simply way . often several tutorials associated given chapter. first “Overview” tutorial follows closely along words examples chapter . Someday, put exercises directly Primer , keeping two sync makes sense. can group tutorials three broad categories. First, tutorials go detail certain aspects chapter. Second, tutorials provide examples/extensions main theme chapter whole. Third, remaining tutorials cover topic — like Quarto Websites Tables — necessary connection chapter . tutorial take 1 2 hours. Depending topic difficulty, might around 100 200 Exercises. tutorials might 30 minutes, especially topic important.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set Up","title":"Instructions for Writing Tutorials","text":"make additions tutorial.helpers, follow set guide fork/download copy PPBDS/tutorial.helpers. Press “Install Restart” “Build” tab ensure latest copy installed. (remotes::install_github(\"PPBDS/tutorial.helpers\") since gets version Github. want version computer get changes make.) Tutorials live inst/tutorials. directory name combination prefix number (indicate week/chapter tutorial associated order ) name, corresponds id' tutorial. Within directory tutorial.Rmd file , sometimes, material like images data directory. prefix number determines order tutorials appear Tutorial pane. Take example tutorial says 052. “05” indicates Week 5 tutorial, “2” indicates second tutorial week. create new tutorial, use File -> New File -> R Markdown. Choose “Template” option select “Primer Tutorial.” “Technical Details” vignette provides overview default material template. Change title, id, description parts YAML header. title may include spaces. id exactly title, lower case spaces special characters replaced dashes. One sentence enough description. id value important. directory tutorial located, leading numbers removed. used name answer file students save end tutorial. Note tutorials must R Markdown documents, meaning suffix .Rmd. can use Quarto documents tutorials. Fortunately, need works Quarto also works R Markdown. main difference code chunk options appear within {}. Don’t worry detail. Just use provided addin templates.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"structure","dir":"Articles","previous_headings":"","what":"Structure","title":"Instructions for Writing Tutorials","text":"beginning every tutorial includes copy-code-chunk info-section code chunks. tutorial divided different Sections appear side panels. first section “Introduction” last “Summary”. Within Sections Introduction Summary, series Exercises can include writing code writing text. end tutorial, download-answers code chunk provides students instructions download copy answers either html rds format. Introduction section two four sentence main topics covered tutorial. ? students get giving 90 minutes lives? functions/techniques learn? Summary section two four sentences bring lessons tutorial together student. know now know ? important functions/techniques covered? ’s completely OK similar Introduction. made promise learn. kept promise. one two key resources topic tutorial, resources linked Introduction Summary. Anything typed keyboard belongs `backticks` (“quotation marks”), except package names, always bolded. Function names always include parantheses: read_csv(), read_csv. Example: + sign used connect ggplot() components using ggplot library.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"sections","dir":"Articles","previous_headings":"","what":"Sections","title":"Instructions for Writing Tutorials","text":"Tutorials divided Sections appear side panel. create sections, include double hash (##) text show side panel. also called Section Title. Use sentence case. line Section Title, put three hashes. ensures students see introductory text see first Exercise. Section begins sentence two group Exercises trying accomplish. Example: link formatted correctly tutorial knitted. Section introductions often two parts: introductory text plot replicated section tutorial. two parts generally separated triple hash. last Exercise Section, put triple hash give two sentence summary Exercise accomplished. Section 20 minute transfer knowledge student. beginning, mentioned purpose. Conclude tying things back original purpose. Often, “purposes” fairly trivial: promised go example scatter plot , fact, . OK! writing poetry. every Section leads salvation. One two high quality links, specifically relevant Section, mentioned either beginning end Section, unless Section short.","code":"## Interacting with sites with `GET()` ###  In order to get data from an API, we use the **httr** package. The package is designed to  imitate standard HTTP in R. Read more about HTTP [here](https://www.jmarshall.com/easy/http/).  ### Exercise 1"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"exercises","dir":"Articles","previous_headings":"","what":"Exercises","title":"Instructions for Writing Tutorials","text":"Section composed series numbered Exercises.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"flow","dir":"Articles","previous_headings":"Exercises","what":"Flow","title":"Instructions for Writing Tutorials","text":"Exercise flow requires students hit “Continue” button least twice. Begin Start sentence two knowledge /question . length Start text longer one two lines, place question code chunk part. Instead, Start includes triple hash, thereby creating Continue button. length text short enough students willing read (two sentences), can include answer code chunk part. time need triple hash code chunk. expect students read two sentences text time. two sentences, almost always want use triple hash order create Continue button. comes answer code chunk hint(s), sometimes proceeded triple hash. want students pause ask question. See discussion. grouping always followed triple hash. want students pause submitted answers likely consider results submission moving . last part Exercise End, main opportunity drop knowledge. sure knowledge drop? Look help page function used answer last question. often argument function used Exercise worth mentioning students. always related functions help page worth mentioning. last part Section another knowledge drop. another Exercise. just knowledge drop last Exercise tries take broader overview. , can’t sentence two. substantive simple “Good job.” Recall 10,000 items want mention. example, Section involved creating scatter plot, last Exercise putting final touches scatter plot. knowledge drop something scatter plots general, minor point particular scatter plot student just created.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"question-types","dir":"Articles","previous_headings":"Exercises","what":"Question types","title":"Instructions for Writing Tutorials","text":"create Exercise headers, use three hashes. Make sure number exercises – ### Exercise 1, ### Exercise 2 . two main types questions. First, normal coding questions. Students write code press Run Code button. Second, text questions require students either write prose copy/paste results running specific commands. Prose needed questions like “Explain meaning potential outcomes.” Copy/paste situations arise students instructed something like connect Github edit qmd. confirm students completed questions issue command like list.files() copy/pasting command output. often abbreviate instruction using CP/CR, stands copy paste command result.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"code-questions","dir":"Articles","previous_headings":"Exercises > Question types","what":"Code questions","title":"Instructions for Writing Tutorials","text":"example code question: First, Start Exercise sets stage. sometimes teaches something new, connects previous question, provides useful link, whatever. long enough, followed triple hash. , text continues instruction. time, , instruction, telling student, step--step, . Second, instruction requires students write code. Good instructions generate results student presses Run Code. Third, Exercise requires copying code prior Exercise place Copy previous code button Exercise code chunk. Fourth, tutorials simple 95% students can answer 95% questions easily. One way ensure add Hint almost every coding question. Hints must always code chunk name exercise chunk hint, “-hint-n” added end. , exercise code chunk named “ex-1”, hint associated exercise named “ex-1-hint-1”. second hint question named “ex-1-hint-2”, . create hint, always use eval = FALSE within parentheses code chunk. hints often include “…” symbols run correct R code. , need tell R run error occur R CMD check. Example: need wrap text long hint hand, inserting carriage returns . R wrap text automatically. Often, hints look like “…” indicates places student needs insert code, value function name. code hints formatted correctly. current version (0.11.2) learnr, students can see first hint clicking next hint. , make sure last hint one want access , .e., one provides key information. students can see last hint, reason consult earlier hints. Hints allowed coding questions, text questions. Fifth, separate code chunks End Exercise using ### . simple questions result display data, one approach write “see value height row 1 23.” allows students know right track. Never hard-code number. Use R inline calculate , even though can bother. , much common, use End drop knowledge, especially function used answer Exercise, one previous Exercises Section.","code":"### Exercise 2  Start your code with `cces`. Use the pipe operator `|>` to add the  function `filter()`, selecting the  rows where `state` is equal to  \"Massachusetts\". To set something equal to a value in `filter()`  use two equal signs, `==`.  ```{r filter-2, exercise = TRUE} ```  ```{r filter-2-hint-1, eval = FALSE} cces |>    filter(state == \"...\") ```  ###   `==` is used because it is **checking** whether the value of the  variable on the left is equal to the value on the left. See  [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Comparison.html)  for discussion of other relational operators in R. A single equation symbol, `=`, is used to set something equal to  something else. <button onclick = \"transfer_code(this)\">Copy previous code<\/button> ```{r ex-1-hint-good, eval = FALSE} This is an example hint. Normally sentences like these  would cause an error in R because it is not proper code.  However, since we include eval = FALSE in the r-chunk,  R ignores all potential errors! ``` ```{r ex-1-hint, eval = FALSE} ... |>    filter(year = ...) |>    ...(flights) ```"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"text-questions","dir":"Articles","previous_headings":"Exercises > Question types","what":"Text questions","title":"Instructions for Writing Tutorials","text":"two types text questions: 1) provide students correct answer, submitted answer, , 2) provide answer. Examples: message argument, provide excellent answer. want allow students check got, less, correct answer. Note set allow_retry FALSE. means , see answer, students can’t modify answer. rows argument decides many rows empty text input . Always specify (approximately) much want students write. Reasonable units : one sentence, two sentences paragraph. Pick one three unless good reason . However, many written questions, don’t provide answer, don’t mind students resubmit. case, use format commonly used “process” questions told students something confirm done copying/pasting result command like list.files().","code":"### Exercise 6  Explain potential outcomes in about two sentences.  ```{r definitions-ex-6} question_text(NULL,     message = \"This is where we place the correct answer. It will appear only after      students have submitted their own answers. Note that we do not need to wrap the      answer text by hand.\",               answer(NULL,             correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ``` ```{r definitions-ex-6}   question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ```"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"tips","dir":"Articles","previous_headings":"Exercises","what":"Tips","title":"Instructions for Writing Tutorials","text":"coding exercise always spit something. Interactivity good! Students always look code producing. situations students need make assignments , , result output Run Code button pressed. : little possible. just make pipe? , need create permanent object student work Exercise code chunk lasting effects. annoying error prone. can student assignment also, part exercise, print object. works well. Follow coding Style Guide, especially spaces around operators like ” = “. Use one command per line pipes graphics, proper indentation. Indent plotting commands call ggplot(). create object one question assume available subsequent questions. won’t ! question independent every question. live separate R instances. exception (make use ) objects created initial setup chunk entire tutorial available later questions, just way library() commands executed need executed . Code chunks Exercises must named. Tutorials knitted/run directory located. , want read file data/ directory, write: R code chunk, presumably global setup chunk. , try execute line code CMD-Return, fail , default, located tutorial.helpers directory start working tutorials. Using setwd() solve problem. CMD-Return now work R session “located” location tutorial run knitted.","code":"x <- read_csv(\"data/myfile.csv\") > getwd() [1] \"/Users/davidkane/Desktop/projects/tutorial.helpers\" > setwd(\"inst/tutorials/031-data-files/\") > getwd() [1] \"/Users/davidkane/Desktop/projects/tutorial.helpers/inst/tutorials/031-data-files\" >"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"pipes","dir":"Articles","previous_headings":"Exercises > Tips","what":"Pipes","title":"Instructions for Writing Tutorials","text":"common type code questions involve step--step process building pipe, final output nice looking graphic. want first show graphic create end Section. show start Section last Exercise, reminder graphic look like students need scroll way back . put code graph code chunk start Section. Save code object. name object “_p” suffix, “p” stands “plot.” way, put object name code chunk end Section rather copying code. build graphic, line line, series Exercises, providing hints along way.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"addins","dir":"Articles","previous_headings":"Exercises > Tips","what":"Addins","title":"Instructions for Writing Tutorials","text":"provided four additions Addins menu: “Tutorial Code Exercise”, “Tutorial Written Exercise (Answer)”, “Tutorial Written Exercise (Answer)” “Format Tutorial Chunk Labels.” Give try! first three insert skeleton next Exercise, featuring key component parts. even takes guess correct Exercise number. “Format Tutorial Chunk Labels” Addin useful. Always run testing tutorial. ensures Exercises sequentially numbered code chunk names correct unique. can find addins “Addins” tab top toolbar RStudio. Please make sure cursor located point want insert new Exercise. may need “Install Restart” tutorial.helpers package Addins appear.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"tutorial-code-exercise","dir":"Articles","previous_headings":"Exercises > Tips > Addins","what":"Tutorial Code Exercise","title":"Instructions for Writing Tutorials","text":"creates new code exercise skeleton auto-generated chunk id exercise title.","code":"### Exercise 7  ```{r exercises-7, exercise = TRUE}  ```  <button onclick = \"transfer_code(this)\">Copy previous code<\/button>  ```{r exercises-7-hint, eval = FALSE}  ```  ###"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"tutorial-written-exercise-with-and-without-answers","dir":"Articles","previous_headings":"Exercises > Tips > Addins","what":"Tutorial Written Exercise (with and without answers)","title":"Instructions for Writing Tutorials","text":"create similar exercise structures auto-generated chunk id exercise title. difference question_text() options filled differently. Written Exercise Answer: Written Exercise without Answer:","code":"### Exercise 8  ```{r exercises-8} question_text(NULL,     message = \"Place correct answer here.\",     answer(NULL, correct = TRUE),     allow_retry = FALSE,     incorrect = NULL,     rows = 6) ```  ### ### Exercise 9  ```{r exercises-9} question_text(NULL,     answer(NULL, correct = TRUE),     allow_retry = TRUE,     try_again_button = \"Edit Answer\",     incorrect = NULL,     rows = 3) ```  ###"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"format-tutorial-chunk-labels","dir":"Articles","previous_headings":"Exercises > Tips > Addins","what":"Format Tutorial Chunk Labels","title":"Instructions for Writing Tutorials","text":"addin formats code chunk labels current Rmd. formats labels code written exercise code chunks well hints. Limitations: doesn’t work well `r` shows entire code chunk code chunk labels (derived section titles) hard cutoff 20 characters. please make sure Section Titles different somewhere first 20 characters (including spaces). :  :","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"knowledge-drops","dir":"Articles","previous_headings":"Exercises","what":"Knowledge Drops","title":"Instructions for Writing Tutorials","text":"difficult part tutorial creation writing “knowledge drops,” snippets wisdom (associated links) used End Exercise. advice: expect easy! Good knowledge drops hard. Make short. Students read sentence two. sure knowledge drop? Look help page one functions used Section. Ideally, function used Exercise, can one used lines . help page two areas interest: Arguments function, used Section still worth mentioning. good knowledge drop mention argument describe might useful. Related functions. example, use “Useful filter functions” section ?dplyr::filter help page. make good knowledge drops! Another example “See also” section ?arrange help page. can’t possibly use every R function Exercise, can least describe knowledge drops. Use high quality links. second edition R Data Science amazing. Link often can. Indeed, think link least every subpart book. want students look often possible. Anything associated Posit (formerly named RStudio) high quality. Examples include sites associated Tidyverse Tidymodels. Avoid links low quality sites like https://rdrr.io/ , https://www.rdocumentation.org/, https://www.datamentor.io/. site uses ads avoided. Links function documentation useful. Indeed, link least documentation every function use. Two categories: Links help pages base function tricky. clear location best use purpose. suggestion use links involving stat.ethz.ch server, home base (think) core R developpers. Links functions functions Tidyverse use docs maintained Posit located tidyverse.github.io. Consider examples arrange() aes(). One common approach like : See ?readr::locale details. Note concisely provide command brings help page link help page . Think back initial discussion 10,000 pieces information want mention point. Among many pages linked help pages core Tidyverse functions, like arrange() aes().","code":""},{"path":[]},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"tibbles","dir":"Articles","previous_headings":"Inputs","what":"Tibbles","title":"Instructions for Writing Tutorials","text":"two main sources tibbles use tutorials. First, use built-data sets. Run library(primer.data) library(tidyverse) package. , run data(). pull list available data sets. Note data frames rather tibbles. Second, can store data — either csv rds files — data directory tutorial, discussed .","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"using-images","dir":"Articles","previous_headings":"Inputs","what":"Using images","title":"Instructions for Writing Tutorials","text":"add images tutorial, first make directory called images folder contains tutorial.Rmd. Store images tutorial . can work files usual ways. Use include_graphics() add image document. Include code chunk, place want image appear tutorial. include_graphics() part knitr package, need library(knitr) setup code chunk. Note need name code chunks.","code":"```{r} include_graphics(\"images/example.png\") ```"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"using-files","dir":"Articles","previous_headings":"Inputs","what":"Using files","title":"Instructions for Writing Tutorials","text":"Files — commonly text files rds files — handled similar fashion images. Create directory called data directory tutorial.Rmd, just images. file data available run time. (Note directory must named data. Something like my_data work.) two main uses files data. First, can used “compile time” (tutorial.Rmd knit html) making plots anything else. Second, available students exercise code blocks “run time” (students tutorial).","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"permanent-objects","dir":"Articles","previous_headings":"Inputs","what":"Permanent objects","title":"Instructions for Writing Tutorials","text":"need R object accessible Exercise code chunk, create initial global setup code chunk top tutorial.","code":""},{"path":[]},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"simple-test","dir":"Articles","previous_headings":"Check tutorial functionality","what":"Simple test","title":"Instructions for Writing Tutorials","text":"simplest way test tutorial.Rmd working : assumes located main directory tutorial.helpers, normally . sure catch potential errors, catch many issues, quick. Replace 02-terminal appropriate directory. can also just hit “Run Document” button. think (exact?) thing render().","code":"rmarkdown::render(\"inst/tutorials/02-terminal/tutorial.Rmd\")"},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"test-before-submitting-a-pr","dir":"Articles","previous_headings":"Check tutorial functionality","what":"Test before submitting a PR","title":"Instructions for Writing Tutorials","text":"done writing tutorial, need make sure works submit pull request. Click “Install Restart” Build tab. , hit “Start Tutorial” Tutorial tab. mimics experience users . catch common errors, like two code chunks name. (sure less simple test .) full test, means running R CMD check. Go top right window RStudio. Click Build pane hit “Check” button (green check mark). see bunch code tests running. Make sure says “OK” next “testthat”. always run submitting pull request.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"what-to-do-if-r-cmd-check-fails","dir":"Articles","previous_headings":"Check tutorial functionality","what":"What to do if R CMD check fails","title":"Instructions for Writing Tutorials","text":"Read error message bottom Build pane. want see “R CMD check succeeded.” , problem. error message often provide clue code error occurred. error message detailed enough, go .package.name.rcheck folder, located directory .package.name computer. folder created R CMD check process, automatically deleted check process succeeds. process fails, .package.name.rcheck folder stays around can examine . key file testthat.Rout.fail, tests directory. details. common source errors something wrong hint code chunks, evaluated just Run Document. Make sure eval = FALSE argument set code chunk hints. Check also see included Information Submission lines.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/articles/instructions.html","id":"difficult-bugs","dir":"Articles","previous_headings":"Check tutorial functionality","what":"Difficult bugs","title":"Instructions for Writing Tutorials","text":"Note R CMD check seem catch cases library() package tutorial package DESCRIPTION. discrepancy cause error Github Actions , , access packages installed part test. careful way Github sloppy deals capitalization changes, especially change name file. example, might first commit file named Rproj.png. Later, decide change file names images lower case. , change name file rproj.png. Commit push. Everything great, right? ! Even Github shows new file name might still file Rproj.png internally. cause errors run checks Github: file ! can see ! tests work local machine. easiest solution delete file (commit change). change name file something else use . R CMD check test tutorials default sections exactly Primer Tutorial template. , use template. either “Introduction” “Download answers” sections missing, R CMD check return something like “test-components.R. Submission (Information) lines missing file”. wary .Rbuildignore file. important, dangerous. particular, ensures specified files copied R package. Specifically, within /inst/tutorials/ directories, *Rmd files files images data installed. might want revisit , instead, specify files copied .","code":"Error: Cannot find the file(s): \"images/rproj.png\""},{"path":"https://ppbds.github.io/tutorial.helpers/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Kane. Author, maintainer.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kane D (2023). tutorial.helpers: Helper Functions Creating Tutorials. R package version 0.0.0.9003, https://ppbds.github.io/tutorial.helpers/.","code":"@Manual{,   title = {tutorial.helpers: Helper Functions for Creating Tutorials},   author = {David Kane},   year = {2023},   note = {R package version 0.0.0.9003},   url = {https://ppbds.github.io/tutorial.helpers/}, }"},{"path":[]},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"about-this-package","dir":"","previous_headings":"","what":"About this package","title":"Helper Functions for Creating Tutorials","text":"tutorial.helpers provides functions RStudio Addins help write R tutorials, especially follow advice best way . approach currently used two packages: .primer.tutorials r4ds.tutorials.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Functions for Creating Tutorials","text":"can install development version GitHub :","code":"remotes::install_github(\"PPBDS/tutorial.helpers\")"},{"path":"https://ppbds.github.io/tutorial.helpers/index.html","id":"accessing-addins","dir":"","previous_headings":"","what":"Accessing Addins","title":"Helper Functions for Creating Tutorials","text":"order access Addins, load package. load relevant RStudio Addins. Read instructions best way write tutorials.","code":"library(tutorial.helpers)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Build HTML Submission Report — build_html","title":"Build HTML Submission Report — build_html","text":"Build HTML Submission Report","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build HTML Submission Report — build_html","text":"","code":"build_html(file, session, is_test = FALSE)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build HTML Submission Report — build_html","text":"file location render Rmd tibble HTML session session object shiny learnr is_test check testing function","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build HTML Submission Report — build_html","text":"rendered html document tibble submission report","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Build RDS Submission Object — build_rds","title":"Build RDS Submission Object — build_rds","text":"Build RDS Submission Object","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build RDS Submission Object — build_rds","text":"","code":"build_rds(file, session, is_test = FALSE)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build RDS Submission Object — build_rds","text":"file location save RDS file session session object shiny learnr is_test check testing function","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/build_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build RDS Submission Object — build_rds","text":"location rds file","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_current_tutorial.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Current Tutorial — check_current_tutorial","title":"Check Current Tutorial — check_current_tutorial","text":"add-formatting tutorials. uses format_tutorial() format tutorial Rmd open current editor","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_current_tutorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Current Tutorial — check_current_tutorial","text":"","code":"check_current_tutorial()"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/check_current_tutorial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Current Tutorial — check_current_tutorial","text":"current document OVERWRITTEN formatted correct chunk labels","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/create_tibble_from_submissions.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Ordered Tibble from Submissions — create_tibble_from_submissions","title":"Create Ordered Tibble from Submissions — create_tibble_from_submissions","text":"Create Ordered Tibble Submissions","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/create_tibble_from_submissions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Ordered Tibble from Submissions — create_tibble_from_submissions","text":"","code":"create_tibble_from_submissions(objs, tutorial_id, label_list = NULL)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/create_tibble_from_submissions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Ordered Tibble from Submissions — create_tibble_from_submissions","text":"objs learnr session submissions tutorial_id id tutorial label_list order code chunks (Optional learnr version 0.10.1.9012)","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/create_tibble_from_submissions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Ordered Tibble from Submissions — create_tibble_from_submissions","text":"tibble ordered answers based label_list","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Tutorial — format_tutorial","title":"Format Tutorial — format_tutorial","text":"function formatting tutorial Rmd files. adjusts code chunk labels correctly. make things easier tutorial writers allow fast chunk label updating quick formatting checking. also need keep track exercise numbers done addin.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Tutorial — format_tutorial","text":"","code":"format_tutorial(file_path)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Tutorial — format_tutorial","text":"file_path Character string","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/format_tutorial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Tutorial — format_tutorial","text":"formatted document correct code hint chunk labels","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Submissions from a learnr Session — get_submissions_from_learnr_session","title":"Get Submissions from a learnr Session — get_submissions_from_learnr_session","text":"Get Submissions learnr Session","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Submissions from a learnr Session — get_submissions_from_learnr_session","text":"","code":"get_submissions_from_learnr_session(sess)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Submissions from a learnr Session — get_submissions_from_learnr_session","text":"sess session object shiny learnr","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/get_submissions_from_learnr_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Submissions from a learnr Session — get_submissions_from_learnr_session","text":"exercise submissions tutorial","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_exercise.html","id":null,"dir":"Reference","previous_headings":"","what":"Tutorial Code Exercise — make_new_exercise","title":"Tutorial Code Exercise — make_new_exercise","text":"add-writing tutorials. reads latest exercise section name adds exercise skeleton. make things easier tutorial-writers now fast click can create exercise . also need keep track exercise numbers done add-. Keyboard shortcut Cmd + SHIFT + E (MAC)","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_exercise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tutorial Code Exercise — make_new_exercise","text":"","code":"make_new_exercise()"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_exercise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tutorial Code Exercise — make_new_exercise","text":"exercise skeleton appropriate labels numbers","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_q_no_answer.html","id":null,"dir":"Reference","previous_headings":"","what":"Tutorial Written Exercise (no Answer) — make_new_q_no_answer","title":"Tutorial Written Exercise (no Answer) — make_new_q_no_answer","text":"add-writing tutorials. reads latest exercise section name adds question skeleton (answers allows retries). make things easier tutorial-writers now fast click can create exercise . also need keep track exercise numbers done add-. Keyboard shortcut Cmd + SHIFT + E (MAC)","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_q_no_answer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tutorial Written Exercise (no Answer) — make_new_q_no_answer","text":"","code":"make_new_q_no_answer()"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_q_no_answer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tutorial Written Exercise (no Answer) — make_new_q_no_answer","text":"question skeleton appropriate labels numbers","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_q_with_answer.html","id":null,"dir":"Reference","previous_headings":"","what":"Tutorial Written Exercise (With Answer) — make_new_q_with_answer","title":"Tutorial Written Exercise (With Answer) — make_new_q_with_answer","text":"add-writing tutorials. reads latest exercise section name adds question skeleton (answers retries). make things easier tutorial-writers now fast click can create exercise . also need keep track exercise numbers done add-. Keyboard shortcut Cmd + SHIFT + E (MAC)","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_q_with_answer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tutorial Written Exercise (With Answer) — make_new_q_with_answer","text":"","code":"make_new_q_with_answer()"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/make_new_q_with_answer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tutorial Written Exercise (With Answer) — make_new_q_with_answer","text":"question skeleton appropriate labels numbers","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all the paths to tutorials — return_tutorial_paths","title":"Return all the paths to tutorials — return_tutorial_paths","text":"Takes package name returns character vector paths tutorialsin installed package, tutorials named tutorial.Rmd.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all the paths to tutorials — return_tutorial_paths","text":"","code":"return_tutorial_paths(package)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all the paths to tutorials — return_tutorial_paths","text":"package character vector package name tested","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/return_tutorial_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all the paths to tutorials — return_tutorial_paths","text":"character vector full paths installed tutorials package","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Tutorial submission functions — submission_server","title":"Tutorial submission functions — submission_server","text":"following function modified Colin Rundel's learnrhash package, available https://github.com/rundel/learnrhash. note also modified Professor Rundel's description: Note including functions learnr Rmd document necessary server function, submission_server(), included R chunk context=\"server\". Conversely, ui functions, *_ui(), must included R chunk context.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tutorial submission functions — submission_server","text":"","code":"submission_server(session)  submission_ui"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tutorial submission functions — submission_server","text":"object class shiny.tag length 3.","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/submission_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tutorial submission functions — submission_server","text":"session session object shiny learnr","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/test_knit_tutorials.html","id":null,"dir":"Reference","previous_headings":"","what":"Knit all the tutorials in a package — test_knit_tutorials","title":"Knit all the tutorials in a package — test_knit_tutorials","text":"Knit tutorials package","code":""},{"path":"https://ppbds.github.io/tutorial.helpers/reference/test_knit_tutorials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knit all the tutorials in a package — test_knit_tutorials","text":"","code":"test_knit_tutorials(package)"},{"path":"https://ppbds.github.io/tutorial.helpers/reference/test_knit_tutorials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knit all the tutorials in a package — test_knit_tutorials","text":"package character vector package name tested","code":""}]
