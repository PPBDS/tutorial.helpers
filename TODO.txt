## Anish

## make_exercise()

* Testing for make_exercise() is a mess. This might be connected to some poor design of the function itself. But it also seems like rstudioapi functions might be problematic to test for some reason. But maybe we can test. Ask AI! There are rstudioapi functions which create a blank file. I bet that, after you run that, you can run make_exercise() and it will file that file. Then you just need to check that the contests of the file match what it should.

* Test cases for the three allowed `type` values.


Stop here.

* make_exercises("no-answer") should have a test code chunk by default. (I assume that this would not cause problems?) Most useful for the case in which the answer requires CP/CR but you still want to confirm that your code works, presumably on a simpler/quicker version of required code. Inserting our code both tests that it works and shows students our code, and what it produces. Or maybe this isn't used widely enough to be worth it?


* We need new options for make_exercises() which create the default questions for some of the new AI stuff.

  + type = "introduction" gives you the first three questions in the Introduction of an ai.tutorial. (Note that make_exercises handles making the exercise number and chunk names for one question work automatically. Will it do that for three added questions.)

  + type = "summary" gives you the 

  + type = "plot" gives you the four questions which result in a plot, which is the usual fashion in which we complete a section (topic) within a tutorial.

  + type = "ai" gives something like:

````{verbatim}
### Exercise 2

Place your cursor in the QMD file in the last code chunk. Use `Cmd/Ctrl + Enter` to execute the last line or pipe.

Note that this causes the code to be copied down to the Console and then executed. 

CP/CR.

```{r makeexercise-2}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 3)
```

###

Our code:

```{r, echo=TRUE}
...
```

### 

<!-- XX: Insert a knowledge drop related to this project. -->
````




# Stepher

* Fix check_membership() PR.

* Add a note in @details of gather_submissions() about this issue: That Google Drive allows for more than one file with the exact same name. If you download "by hand," then you got both files but with one of them renamed. If you use the Google Drive argument, the second file overwrites the first. Actually, gather_submissions() should have a @description paragraph with an overview of what it does.

* Shouldn't there be an example that works? Hold off on this for now. Complex question:

gather_submissions(path = "tests/testthat/fixtures/answers_html/", 
                   title = ".", 
                   verbose = TRUE)

* Only two possible values of verbose, maybe TRUE and FALSE. Default is FALSE. 
  1. gather_submissions() 
  2. submissions_summary()
  3. submissions_answers()
  4. check_membership()
  5. check_key_vars()

* Fix check_membership(). `data` should probably be `id`. Should handle memberships that are not there.

* Create a nice test case using real data. Not too big. Can be used for many functions. A good test input is probably a list of tibble of length 3 saved to an rds object.

* Do not dump downloaded files in the current directory. It places stuff in a tmp, and then you delete that directory at the end of the function. Maybe there is an argument like `keep_loc`, which is NULL by default. But if it is present, the downloaded files are dumped there and left alone. But keep_loc must be NULL unless it is a Google Drive download.  SS: Done


* check_key_vars(x, key_vars = "email", verbose = TRUE) only reports bad files. It also reports total files checked and passed, as it does now.






Does test cases need to load libraries like library(tibble) and library(dplyr)?

Add a paragraph at the top of write answers test (which you can ask AI to help you with) which gives some insight into how it does the trick of a test tutorial session. SS: Done

Add response to Issue. Thank her. Ask her to install new version and check.

Must be a way to download the entire folder, given just the url, as opposed to downloading each file one at a time. For Google drive, download the whole folder. (Maybe confirm that it is a folder. That is the only case we allow.) Make sure to thoroughly document what going mess.




## write_answers()

* Delete rds and pdf portions of test-write_answers().

* we need a test case for write_answers.

* Think harder about whether write_answers() should write out questions which the student did not answer. Almost certainly Yes. Also, what about a header which include tutorial information, like name or, even id/version?

* See the comments at test-write_answers.R for detailed discussion. 

* Change write_answers() to get rid of test mode since, with changes in exported learnr functions, this hack may no longer be necessary. 

* Change write_answers() completely? See https://mastering-shiny.org/action-transfer.html#downloading-reports


# This Summer

## find_answers()

* Get specific answers for some students. find_answers(). Use find_submissions. Adds `questions` and a vector argument: c("temerance-17", "temperance-18"). Creates a tibble with emails answers to questions. How structure? Include `name` if available? find_answers only allows for one title. Checks this.

* name, email, question-1, question-2

* If questions = c("*"), give all questions? Not yet!

* Is there a way to have find_answers() open all the URLs for a given answer? Context is asking find_answers() for a single title and a single question which is an URL. Would be cool to open a new browser window with one tab for each URL, making it easier for a TF to skim the work of all her students.

## process_submissions()

* return_type = "All" in process_submissions() should not include submission_type column

* process_submissions() test cases should not just spit out "Could not process file: getting-started_answers.pdf". Handle it better.

* I don't like the way the test cases for process_submissions spit out the pdf files names that they are ignoring, even if it does not effect the tests passing. At least, we should add a new test case for this behavior. Perhaps reorganize the test files into a couple of different directories. Or make the pattern ignore the pdf files in the test cases. But I couldn't get that to work. (I am no longer sure what this comment means!) 


## check_current_tutorial(), meaning format_tutorial()

* Figure out why check_current_tutorial() didn't work on Project 2 on second Github tutorial, at least on the last few questions. Issue probably connected to this comment from Positron and Code tutorial: "To Format the chunk labels you need to comment out the example comment line in Script 1. And there is at least one more example later." So, we really need to make  check_current_tutorial() more robust.

* Change format_tutorial() so it looks to see if you have any chunk names in your file with reserved names (name, email, ID, minutes, answers), and then warns you about that fact.

* It is annoying that R attempts to run `r scales::comma(x)` even when it is placed in a verbatim environment. That is annoying! But how can format_tutorial() prevent? It can't! This is a problem with learnr::run_tutorial().

* Sometimes, if there is a include graphics chunk, the main chunk label gets added to it, even if that label already exists for that question a few lines down. Not sure what to do. Best would be if check_current_tutorial, at the end, checked that there are no duplicate labels and then reported any that it found.

* Do we need to deal with the case in which the only option is echo = FALSE. Right now, it just gets deleted. Which does not matter since echo = FALSE is a global option set by all tutorials. But, this might be a sign of bad behavior in general. Like why delete a code chunk option under any circumstances? No good reason to do so! Need to fix because current code leaves a duplicate code chunk there.

* Advanced: Get Format Code Chunk Labels add-in to catch the case in which a non-question code chunk is duplicated.


## show_file()

* show_file() should fail if `chunk` is anything other than the allowed character strings, i.e., chunk = 1 should fail.

* If `chunk` equals "YAML", then just return the YAML header, without the surrounding ----.

* `show_file(test_file, start = 0)` should return the whole file.

## Copy code buttons

It is becoming clear that the copy code button is not really needed in modern tutorials because no longer spend much/any time building up code pipes line by line. And, even when we do, we can just use the __ trick to include the prior answers in the next exercise code chunk. 

So, that would suggest that an author might not want to include the copy button in her tutorial. And that should be fine! But, right now, we encourage people to run check_tutorial_defaults(). That will fail if there is no copy code button. So, we need to add an argument to check_tutorial_defaults() which allows one to not require the copy code button.


## Points about testing

* Figure out why devtools::check() is 0/0/0 but devtools::test() is 2 FAILs and 4 SKIPs.

* Running devtools::check(remote = TRUE, manual = TRUE) produces some spurious documentation warnings. Produce a reprex for the devtools folks.

* Add a test case which ensures that downloading the answers actually works. I got caught with a bug on this when I stopped exporting write_answers(). That change caused the download buttons to fail, but I did not know it until someone reported it.

* Understand https://r-pkgs.org/testing-basics.html#sec-snapshot-tests and other advanced testing stuff. I bet that "withr::local_options" will be valuable.

* Use testing_package() rather than hard-coding the package name.

* Read https://testthat.r-lib.org/articles/test-fixtures.html

* test_path() does not work if the file is not in tests/testthat/. Might still be useful since it means we don't need to setwd() to play with testing interactively.

* Explore tutorial testing: https://pkgs.rstudio.com/learnr/articles/exercises.html#test-code-or-cases

* Do something about test-return_tutorial_paths(). 

* Maybe functions like testing_package() or skip_if_offline() would be useful. 

## set_positron_settings() 

* should report what settings it found and what, if any, settings it changed.

* Maybe this should be placed in everyone's .Rprofile?

  options(timeout = max(300, getOption("timeout")))

  Or maybe set some other way? Can't hurt and often helps.

* Without the double backslashes, this command fails on Windows because /U gets interpreted as hex. Please fix!

tutorial.helpers::set_positron_settings(positron_settings = 
   list("files.dialog.defaultPath" = "C://Users//dkane//projects"))

* Maybe this can now be part of the default set_positron_settings() call:

 "terminal.integrated.defaultProfile.windows": "Git Bash"

 Maybe they need to run this command to fix this one setting, after we ensure that they have installed Git for Windows. Anyway, the key material/images from https://ppbds.github.io/primer/getting-started-with-positron.html#the-terminal needs to be in the tutorial.


* Perhaps I should add some default shortcut key creations to set_positron_settings(). 

* How does line-wrapping work in Positron? And, whatever the answer, is this something 
that we should set for students in the Positron tutorial?

* Other items of interest:

{
  "editor.wordWrap": "on",
  "files.defaultLanguage": "r",
  "rewrap.wrappingColumn": 80,
  "workbench.startupEditor": "newUntitledFile",
  "files.hotExit": "onExitAndWindowClose",
  "explorer.openEditors.dynamicHeight": true,
  "workbench.editor.highlightModifiedTabs": true,
  "files.insertFinalNewline": true,
  "editor.renderFinalNewline": "dimmed",
  "editor.renderWhitespace": "trailing",
  "files.trimFinalNewlines": true,
  "files.trimTrailingWhitespace": true,
  "diffEditor.ignoreTrimWhitespace": true,
  "workbench.editor.enablePreview": false
}

* Also, seems like there is a keybindings.json file (in the same location), in which we can do stuff like:

[]
    {
        "key": "cmd+d",
        "command": "-editor.action.deleteLines",
        "when": "config.rstudio.keymap.enable && editorTextFocus"
    }
]

* Move over settings.json manipulations to this package. (??)





## After This Summer

The below are projects that we probably won't get to this summer.

### Tutorial

* Should we set a projects directory in this tutorial as well? Not sure . . .

* Update the images now that the add a new Console button looks and behaves a little differently?

* How do we teach students to switch between Positron windows? I think:

    + `^w` might be the best approach. Works on Mac (and Windows?). Only annoyance is that it does not switch Windows. Instead, it pulls up that set of open Positron windows for you to choose from. But, if there are only two, and you just hit enter, you switch to the other one, which is what you want.

    + `Cmd + `` works, but only the Mac. It is what I use, but it is not a convenient shortcut key.

    + `Alt + Tab` works on Windows? But it cycles through all Windows, including other applications that you might have open.

    Maybe workbench.action.quickSwitchWindow is the key command, and we should set that to a specific command sequence for everyone. This would involve, I think, editing/creating the keybindings.json file. Maybe:

{
  "key": "ctrl+alt+w",
  "command": "workbench.action.quickSwitchWindow"
}

    Or: 

[
  {
    "key": "ctrl+alt+w",
    "command": "workbench.action.quickSwitchWindow",
    "when": "!isMac"
  },
  {
    "key": "cmd+opt+w",
    "command": "workbench.action.quickSwitchWindow",
    "when": "isMac"
  }
]


### Other Stuff

* Think harder about the changes that will be allowed once we have a new Tutorial Selector Extension for Positron available.  In essence, there are three things we care about. One: What order do tutorials appear in the selector? They will be sorted by package, obviously, but we want package authors to be able to order them as they see fit, with perhaps the default ordering being the ordering of directory names. Second, we need to display a name of the tutorial which students will see. Presumably, this will just be the title of the tutorial. Third, we have the file name of the saved answers. Presumably, this will just use the id variable.


* I am still concerned about the Terminal for Windows users. Does installing RTools just magically make that work OK? No! Consider changing the JSON file so that Windows users will use bash. Ask Grok for details. Example:

{
  "terminal.integrated.profiles.windows": {
    "RTools Bash": {
      "path": "C:\\rtools45\\usr\\bin\\bash.exe",
      "args": ["--login"]
    }
  },
  "terminal.integrated.defaultProfile.windows": "RTools Bash"
}

No idea if this would work. And, if we start using it, we might need to update the Terminal tutorial.


* I think that there is a bug (or at least a change) in how to handle links within a vignette. That is, within instructions.qmd, I want to link discussion of knowledge drops to the Knowledge Drops section. The old way of doing that in Rmd files still *seemed* to work, in the sense that the links worked in the result html, but R CMD check seemed to identify those links as have an Empty URL, generating a NOTE in R CMD check which led to CRAN rejection. 

* Which packages do we really need, either in Imports or in Suggests?

* Check out all unit tests.

* Related to the above is that the Github Actions files differ in that R CMD check uses renv and pkgdown.yml uses dependencies. The former ensures that the quarto package is available because it is in the renv.lock file. But with dependencies, I suspect that quarto must appear in the imports part of the DESCRIPTION file, but maybe Suggests would be enough?

* Do a complete clean up of the Github Action files.

* Vignette about Posit Workbench.

* Might be nice if the email entry field at least attempted to note/warn if the submitted information was not a legitimate email. Perhaps at least check if there is an `@`.

* There are fewer and fewer reasons why we need a copy previous code option. Consider getting rid of Copy code button. Now that we can pre-place code from previous questions into the Exericise code chunk, we don't need to allow students to Copy from previous exercise. Since that is the only use case for the Copy code button, we can delete it, and all its associated junk. The counter-argument is that if you populate the starting code for Exercise N + 1, then a student working on Exercise N can cheat and just look at by skipping ahead. Counter-counter-argument is that students can already do this by looking at the Hint for Exercise N + 1. Since they don't (?), we don't really have to worry about them cheating in this way. Moreover, the vast majority of questions are so easy that cheating is actually more work. Just look at the provided hint!

* Consider providing a simple hash to guarantee that students haven't cheated, even if they submit html. The function would run some R code which produced a string including things like date, time, pwd, whois, computer name, and whatever else. It then takes that string and turns it into a hash. That hash is output into the html. If there are concerns about cheating, an instructor can check the hash. 

* Ensure that this code handles our test code chunks in non-code questions. See Positron and Github (gert) for examples. Seems to work, but some test cases would be nice.

* reactiveConsole(TRUE) might make it easier to experiment with reactivity in the Console.



## Downloading answers

* Perhaps Section 9.2.3 Downloading reports in the Shiny book shows a much better way of handling our answer-saving problem: parameterised RMarkdown. 

* With rstudioapi, use selectFile and friends as an easier way of saving student answers.

* The **downloadthis** package looks very interesting. It seems easy to download a file without all the rigamarole of the Shiny server. But it requires that the file exists. Can we automatically run the code to create the files? Yes! We can write the code in the final exercise and then tell students to hit Run Code. They can then hit the download button. But would that really work? Isn't an Exercise code chunk its own separate world, with no notion of the tutorial of which it is a part? Maybe the same local{()} nonsense that we use for submission_server() would do the trick. But that would make for some ugly code. Maybe we can hide the code, but they still press the Run Code button.




## Using ___

The latest version of learnr seems to allow for ____ as a useful placeholder in code which is left in the actual exercise code blocks without creating an error. Might be useful! Might be much better than always inserting code from previous question.

So, in addition to hints, we could have each code block pre-populated with the code we want them to start with. No need for copy-code from previous exercise! But some diligent students probably don't use the hint. (But they do use Copy from Previous question.) We don't want to force them to see too much before they try out the question.

Blanks are detected using regular expressions (since blanks may make the code unparsable), and learnr’s default pattern is to detect three or more consecutive underscores. Authors can choose the pattern for detecting blanks with the exercise.blanks chunk option. Setting exercise.blanks = "[.]{2}[a-z]+[.]{2}", for example, would allow the author to use valid R syntax for blanks. The warning message shown to students calls out the blanks they need to fill in.

## Other items

* Want to change the color of the OK box so that it is green when students enter
their email or other text. This seem relevant:  https://stackoverflow.com/questions/33620133/change-the-color-of-action-button-in-shiny/35871042.



# Add this material as a technical appendix in instructions.qmd.


## Get a better understanding of package locations

Keep in mind that there are (at least) two versions of **your.tutorial.package** installed on your machine. In my case (using **all.primer.tutorials**), we have

```{bash eval = FALSE}
> /Library/Frameworks/R.framework/Versions/4.1/Resources/library
```

and

```{bash eval = FALSE}
> /Users/dkane/Library/Caches/org.R-project.R/R/renv/library/all.primer.tutorials-07f29d85/R-4.2/aarch64-apple-darwin20"
```

The first is the default location for packages. This is where things go unless you do something special. The second is installed by `renv`, which was used within the **all.primer.tutorials** project. When you are working in your **all.primer.tutorials** project, as you generally will, the `renv` version of the **all.primer.tutorials** library is what you will be using. You can check this by running `.libPaths()`.

```{r eval = FALSE}
> .libPaths()
[1] "/Users/dkane/Library/Caches/org.R-project.R/R/renv/library/all.primer.tutorials-07f29d85/R-4.2/aarch64-apple-darwin20"
[2] "/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library"
```

Whenever you `library()` a package, R looks through, in order, the values returned by `.libPaths()`. **renv** sets things up so that the first item is its collection of packages. Note that these are placed in a weird location, including a temp directory named something like `all.primer.tutorials-07f29d85`. I am not sure how **renv** decided to create a new one of these. It does not delete the old ones. In the case of major breakdowns, deleting these directories by hand can fix things.


## Comments on .Rbuildignore

For some reason, it is impossible to include comments in the `.Rbuildignore`, at least by using the "#" symbol. I think the key issue is that using `*` (or maybe a parenthesis) in a line which begins with `#` causes trouble. Regardless, here are some thoughts on the version we currently use in **primer.tutorials**.

We would like to ensure that all the junk files which end up in the `tutorials/*` directories are not included in the build. Such files are often large. They also run the risk of messing things up in that they might cause certain tests to pass for us but which would fail for anyone who downloads from Github. (The `.gitignore` file does a reasonable job of ensuring that such files do not end up on Github.)

The key line is:

````
tutorials/[^/]*/(?!(data|images|.*Rmd))
````

This excludes everything in any subdirectory of the tutorials directory except an `images` directory (a file named images would also be included) or a `data` directory or a file suffixed with `.Rmd`.
