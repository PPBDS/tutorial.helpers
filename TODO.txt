## Before Next Release

test and discuss all new functions.

clean up set_positron_settings and related Code

clean up Introduction to R tutorial

update make_exercises

### Tutorial

* Set a projects directory in this tutorial.

* Update the images now that the add a new Console button looks and behaves a little differently.

* Move material about projects and other stuff from positron 01-code tutorial here.

* The key material/images from https://ppbds.github.io/primer/getting-started-with-positron.html#the-terminal needs to be in the tutorial.








## Later Projects

### set_positron_settings issues

Here is what .vscode/settings.json might look like for someone who wants their R code formatted on save, in both R scripts and Quarto documents:

{
    "[r]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "Posit.air-vscode"
    },
    "[quarto]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "quarto.quarto"
    }
}

The most upvoted feature request in this release is a new keybinding to execute the current statement in your Python or R Console without advancing to the next one. You can now use Alt+Enter to execute your current statement without moving the cursor. (The existing keybinding Ctrl/Cmd+Enter executes the current statement and does advance your cursor.)


* https://forum.posit.co/t/teaching-option-for-positron-on-ipad-and-or-in-the-cloud/206817/3 for teaching and Positron workbench.

On using Air for formatting: https://github.com/r-lib/usethis/pull/2109

* Once new version is out, update this thread with our recent changes to set_positron_settings: https://github.com/r-lib/usethis/issues/2111

* I am most concerned about what happens when a student does not answer a question. The most common case is for `name` or `email`. But this can also arise for questions which ask for URLs. When this happens --- at least until we change write_answers() --- the resulting tibble will not have a row with that value for `id`. I don't think we handle this in any sort of consistent/sensible fashion.

* Some of the examples for submissions_* functions ought to run, right? At least the ones which use directories which are installed with the package. Why are they all "Don't Run"?

* Need better documentation of using submissions_* functions. They are the ones that people might use.


* Use: "path <- testthat::test_path("fixtures", "answers_html")" Instead of: "path <- file.path(find.package("tutorial.helpers"), "tests/testthat/fixtures/answers_html")" in the top documentation part of some R files. 

* Why does return_tutorial_paths("tutorial.helpers") fail when run inside the tutorial.helpers project but work outside of it? I suspect that this is connected to the hoops that jump through (successfully?) in test-return_tutorial_paths.R.

* Think harder about whether write_answers() should write out questions which the student did not answer. Almost certainly Yes. Also, what about a header which include tutorial information, like name or, even id/version? 

* Want to change the color of the OK box so that it is green when students enter
their email or other text. This seem relevant:  https://stackoverflow.com/questions/33620133/change-the-color-of-action-button-in-shiny/35871042.

### make_exercises

* We need new options for make_exercises() which create the default questions for some of the new AI stuff.

  + type = "introduction" gives you the first three questions in the Introduction of an ai.tutorial. (Note that make_exercises handles making the exercise number and chunk names for one question work automatically. Will it do that for three added questions?)

  + type = "summary" gives you the 

  + type = "plot" gives you the four questions which result in a plot, which is the usual fashion in which we complete a section (topic) within a tutorial.

  + type = "ai" gives something like:

````{verbatim}
### Exercise 2

Place your cursor in the QMD file in the last code chunk. Use `Cmd/Ctrl + Enter` to execute the last line or pipe.

Note that this causes the code to be copied down to the Console and then executed. 

CP/CR.

```{r makeexercise-2}
question_text(NULL,
    answer(NULL, correct = TRUE),
    allow_retry = TRUE,
    try_again_button = "Edit Answer",
    incorrect = NULL,
    rows = 3)
```

###

Our code:

```{r, echo=TRUE}
...
```

### 

<!-- XX: Insert a knowledge drop related to this project. -->
````

* The determine_* functions are suspect. 

  + Should they really look into the active document if file_path equals NULL. I don't think so . . . 
  
  + Perhaps more importantly, they should have sensible behavior when called a file with no Sections and no Exercises.

  + They need test cases!



## check_current_tutorial(), meaning format_tutorial()

* Change format_tutorial() so it looks to see if you have any chunk names in your file with reserved names (name, email, ID, minutes, answers), and then warns you about that fact.

* It is annoying that R attempts to run `r scales::comma(x)` even when it is placed in a verbatim environment. That is annoying! But how can format_tutorial() prevent? It can't! This is a problem with learnr::run_tutorial().

* Sometimes, if there is a include graphics chunk, the main chunk label gets added to it, even if that label already exists for that question a few lines down. Not sure what to do. Best would be if check_current_tutorial, at the end, checked that there are no duplicate labels and then reported any that it found.

* Do we need to deal with the case in which the only option is echo = FALSE. Right now, it just gets deleted. Which does not matter since echo = FALSE is a global option set by all tutorials. But, this might be a sign of bad behavior in general. Like why delete a code chunk option under any circumstances? No good reason to do so! Need to fix because current code leaves a duplicate code chunk there.

* Advanced: Get Format Code Chunk Labels add-in to catch the case in which a non-question code chunk is duplicated.


## Points about testing

* Add a test case which ensures that downloading the answers actually works. I got caught with a bug on this when I stopped exporting write_answers(). That change caused the download buttons to fail, but I did not know it until someone reported it.

* Use testing_package() rather than hard-coding the package name.

* Explore tutorial testing: https://pkgs.rstudio.com/learnr/articles/exercises.html#test-code-or-cases

* Maybe functions like testing_package() or skip_if_offline() would be useful. 




## After This Summer

The below are projects that we probably won't get to this summer.


### Other Stuff

* Think harder about the changes that will be allowed once we have a new Tutorial Selector Extension for Positron available.  In essence, there are three things we care about. One: What order do tutorials appear in the selector? They will be sorted by package, obviously, but we want package authors to be able to order them as they see fit, with perhaps the default ordering being the ordering of directory names. Second, we need to display a name of the tutorial which students will see. Presumably, this will just be the title of the tutorial. Third, we have the file name of the saved answers. Presumably, this will just use the id variable.

* I think that there is a bug (or at least a change) in how to handle links within a vignette. That is, within instructions.qmd, I want to link discussion of knowledge drops to the Knowledge Drops section. The old way of doing that in Rmd files still *seemed* to work, in the sense that the links worked in the result html, but R CMD check seemed to identify those links as have an Empty URL, generating a NOTE in R CMD check which led to CRAN rejection. 

* Which packages do we really need, either in Imports or in Suggests?

* Related to the above is that the Github Actions files differ in that R CMD check uses renv and pkgdown.yml uses dependencies. The former ensures that the quarto package is available because it is in the renv.lock file. But with dependencies, I suspect that quarto must appear in the imports part of the DESCRIPTION file, but maybe Suggests would be enough?


* Might be nice if the email entry field at least attempted to note/warn if the submitted information was not a legitimate email. Perhaps at least check if there is an `@`.

* There are fewer and fewer reasons why we need a copy previous code option. Consider getting rid of Copy code button. Now that we can pre-place code from previous questions into the Exericise code chunk, we don't need to allow students to Copy from previous exercise. Since that is the only use case for the Copy code button, we can delete it, and all its associated junk. The counter-argument is that if you populate the starting code for Exercise N + 1, then a student working on Exercise N can cheat and just look at by skipping ahead. Counter-counter-argument is that students can already do this by looking at the Hint for Exercise N + 1. Since they don't (?), we don't really have to worry about them cheating in this way. Moreover, the vast majority of questions are so easy that cheating is actually more work. Just look at the provided hint!

* Consider providing a simple hash to guarantee that students haven't cheated, even if they submit html. The function would run some R code which produced a string including things like date, time, pwd, whois, computer name, and whatever else. It then takes that string and turns it into a hash. That hash is output into the html. If there are concerns about cheating, an instructor can check the hash. 

* Ensure that this code handles our test code chunks in non-code questions. See Positron and Github (gert) for examples. Seems to work, but some test cases would be nice.

* reactiveConsole(TRUE) might make it easier to experiment with reactivity in the Console.



## Downloading answers

* Perhaps Section 9.2.3 Downloading reports in the Shiny book shows a much better way of handling our answer-saving problem: parameterised RMarkdown. 

* With rstudioapi, use selectFile and friends as an easier way of saving student answers.

* The **downloadthis** package looks very interesting. It seems easy to download a file without all the rigamarole of the Shiny server. But it requires that the file exists. Can we automatically run the code to create the files? Yes! We can write the code in the final exercise and then tell students to hit Run Code. They can then hit the download button. But would that really work? Isn't an Exercise code chunk its own separate world, with no notion of the tutorial of which it is a part? Maybe the same local{()} nonsense that we use for submission_server() would do the trick. But that would make for some ugly code. Maybe we can hide the code, but they still press the Run Code button.




## Using ___

The latest version of learnr seems to allow for ____ as a useful placeholder in code which is left in the actual exercise code blocks without creating an error. Might be useful! Might be much better than always inserting code from previous question.

So, in addition to hints, we could have each code block pre-populated with the code we want them to start with. No need for copy-code from previous exercise! But some diligent students probably don't use the hint. (But they do use Copy from Previous question.) We don't want to force them to see too much before they try out the question.

Blanks are detected using regular expressions (since blanks may make the code unparsable), and learnr’s default pattern is to detect three or more consecutive underscores. Authors can choose the pattern for detecting blanks with the exercise.blanks chunk option. Setting exercise.blanks = "[.]{2}[a-z]+[.]{2}", for example, would allow the author to use valid R syntax for blanks. The warning message shown to students calls out the blanks they need to fill in.


# Add this material as a technical appendix in instructions.qmd.


## Get a better understanding of package locations

Keep in mind that there are (at least) two versions of **your.tutorial.package** installed on your machine. In my case (using **all.primer.tutorials**), we have

```{bash eval = FALSE}
> /Library/Frameworks/R.framework/Versions/4.1/Resources/library
```

and

```{bash eval = FALSE}
> /Users/dkane/Library/Caches/org.R-project.R/R/renv/library/all.primer.tutorials-07f29d85/R-4.2/aarch64-apple-darwin20"
```

The first is the default location for packages. This is where things go unless you do something special. The second is installed by `renv`, which was used within the **all.primer.tutorials** project. When you are working in your **all.primer.tutorials** project, as you generally will, the `renv` version of the **all.primer.tutorials** library is what you will be using. You can check this by running `.libPaths()`.

```{r eval = FALSE}
> .libPaths()
[1] "/Users/dkane/Library/Caches/org.R-project.R/R/renv/library/all.primer.tutorials-07f29d85/R-4.2/aarch64-apple-darwin20"
[2] "/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library"
```

Whenever you `library()` a package, R looks through, in order, the values returned by `.libPaths()`. **renv** sets things up so that the first item is its collection of packages. Note that these are placed in a weird location, including a temp directory named something like `all.primer.tutorials-07f29d85`. I am not sure how **renv** decided to create a new one of these. It does not delete the old ones. In the case of major breakdowns, deleting these directories by hand can fix things.


## Comments on .Rbuildignore

For some reason, it is impossible to include comments in the `.Rbuildignore`, at least by using the "#" symbol. I think the key issue is that using `*` (or maybe a parenthesis) in a line which begins with `#` causes trouble. Regardless, here are some thoughts on the version we currently use in **primer.tutorials**.

We would like to ensure that all the junk files which end up in the `tutorials/*` directories are not included in the build. Such files are often large. They also run the risk of messing things up in that they might cause certain tests to pass for us but which would fail for anyone who downloads from Github. (The `.gitignore` file does a reasonable job of ensuring that such files do not end up on Github.)

The key line is:

````
tutorials/[^/]*/(?!(data|images|.*Rmd))
````

This excludes everything in any subdirectory of the tutorials directory except an `images` directory (a file named images would also be included) or a `data` directory or a file suffixed with `.Rmd`.


## Extension

* Update README.md. Special focus on the process of updating things. Make the README as good as you can. So good that I don't feel the need to bother you!

* Make version number like 0.1.0

* Make it so I know how (and do on Tuesday) start the submission process to the marketplace.

* Provide Tutorial Pane functionality.
  + Determine all installed R packages. 
  + Determine all tutorials in those packages.
  + Create table
  + Allow user to search that table dynamically. So, I type "primer" and, instead of seeing all the packages/tutorials, I only see packages or tutorials which include "primer".
  + In the results of the search bar, there is the package and tutorial name and a "Run" button which you can press to run the tutorial. Behind the scenes, that issues something like `learnr:run_tutorial("name", "package")`, presumably by copying the command to the live Console and then hitting return.